<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classHack_1_1Chips_1_1BitUtils" kind="class" language="C++" prot="public">
    <compoundname>Hack::Chips::BitUtils</compoundname>
    <includes local="no">Source/Chips/BitUtils.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type><ref refid="classuint8__t" kindref="compound">uint8_t</ref></type>
        <declname>Count</declname>
        <defname>Count</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1a266db4b38d31abd421bdb6356b6d8f6a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Chips::BitUtils&lt; T, Count &gt;::applyBit</definition>
        <argsstring>(T &amp;bits, const T &amp;index, bool value)</argsstring>
        <name>applyBit</name>
        <param>
          <type>T &amp;</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="114" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1a8de689aae4b89fd7d06c770aed087e37" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Chips::BitUtils&lt; T, Count &gt;::assignBit</definition>
        <argsstring>(T &amp;bits, const T &amp;index)</argsstring>
        <name>assignBit</name>
        <param>
          <type>T &amp;</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="110" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="220" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1adc5cf65b1d1ca5d3562cb57711d78ce9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Chips::BitUtils&lt; T, Count &gt;::clearBit</definition>
        <argsstring>(T &amp;bits, const T &amp;index)</argsstring>
        <name>clearBit</name>
        <param>
          <type>T &amp;</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="112" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="230" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1ae3a8aa786d194eb21dc8a71b3d8de9af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T Hack::Chips::BitUtils&lt; T, Count &gt;::extract</definition>
        <argsstring>(const T &amp;in, const T &amp;lo, const T &amp;hi)</argsstring>
        <name>extract</name>
        <param>
          <type>const T &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>lo</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>hi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="104" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="187" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1a62cc15c18ccdd215a9ef08e8a8021564" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Chips::BitUtils&lt; T, Count &gt;::getBit</definition>
        <argsstring>(const T &amp;bits, const T &amp;index)</argsstring>
        <name>getBit</name>
        <param>
          <type>const T &amp;</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="106" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="204" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1ac31a6aa587c55f64f6573492652e1730" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T Hack::Chips::BitUtils&lt; T, Count &gt;::pack</definition>
        <argsstring>(const uint8_t *array)</argsstring>
        <name>pack</name>
        <param>
          <type>const <ref refid="classuint8__t" kindref="compound">uint8_t</ref> *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="95" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="134" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1a15ca6f92f9fcfddbec6acfc088207580" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T Hack::Chips::BitUtils&lt; T, Count &gt;::pack</definition>
        <argsstring>(const char *array)</argsstring>
        <name>pack</name>
        <param>
          <type>const char *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="97" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="146" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1a6fd7a5127f6124328bcdce2c4f8f3746" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>T</type>
        <definition>T Hack::Chips::BitUtils&lt; T, Count &gt;::pack</definition>
        <argsstring>(const bool *array)</argsstring>
        <name>pack</name>
        <param>
          <type>const bool *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="99" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="158" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1a8f720f0a46647449b7ad1d440bc7bcc0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="classuint8__t" kindref="compound">uint8_t</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T Hack::Chips::BitUtils&lt; T, Count &gt;::pack</definition>
        <argsstring>(const bool array[N])</argsstring>
        <name>pack</name>
        <param>
          <type>const bool</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="102" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="171" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1ad5c0a4604c2e2f1f84cfc932d703996f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Chips::BitUtils&lt; T, Count &gt;::printBit</definition>
        <argsstring>(const T &amp;bits)</argsstring>
        <name>printBit</name>
        <param>
          <type>const T &amp;</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="116" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="246" bodyend="255"/>
        <references refid="classHack_1_1Console_1aa75558c74eafde74be9d33818a79a3fe" compoundref="Console_8cpp" startline="199" endline="204">Hack::Console::writeLine</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1ab1a8c5970c7a58f399c82c96c872a920" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Chips::BitUtils&lt; T, Count &gt;::setBit</definition>
        <argsstring>(T &amp;bits, const T &amp;index)</argsstring>
        <name>setBit</name>
        <param>
          <type>T &amp;</type>
          <declname>bits</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="108" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1aeb4746b405570c6d38aebba1532c324c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Chips::BitUtils&lt; T, Count &gt;::unpack</definition>
        <argsstring>(const T &amp;value, bool *array)</argsstring>
        <name>unpack</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="91" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="120" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Chips_1_1BitUtils_1a8c82269dbbcc05e6a5db4bba94b32c98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Chips::BitUtils&lt; T, Count &gt;::unpack</definition>
        <argsstring>(const T &amp;value, uint8_t *array)</argsstring>
        <name>unpack</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classuint8__t" kindref="compound">uint8_t</ref> *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Chips/BitUtils.h" line="93" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="127" bodyend="131"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Source/Chips/BitUtils.h" line="89" column="1" bodyfile="Source/Chips/BitUtils.h" bodystart="88" bodyend="117"/>
    <listofallmembers>
      <member refid="classHack_1_1Chips_1_1BitUtils_1a266db4b38d31abd421bdb6356b6d8f6a" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>applyBit</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1a8de689aae4b89fd7d06c770aed087e37" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>assignBit</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1adc5cf65b1d1ca5d3562cb57711d78ce9" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>clearBit</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1ae3a8aa786d194eb21dc8a71b3d8de9af" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>extract</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1a62cc15c18ccdd215a9ef08e8a8021564" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>getBit</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1ac31a6aa587c55f64f6573492652e1730" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>pack</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1a15ca6f92f9fcfddbec6acfc088207580" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>pack</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1a6fd7a5127f6124328bcdce2c4f8f3746" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>pack</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1a8f720f0a46647449b7ad1d440bc7bcc0" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>pack</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1ad5c0a4604c2e2f1f84cfc932d703996f" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>printBit</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1ab1a8c5970c7a58f399c82c96c872a920" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>setBit</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1aeb4746b405570c6d38aebba1532c324c" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>unpack</name></member>
      <member refid="classHack_1_1Chips_1_1BitUtils_1a8c82269dbbcc05e6a5db4bba94b32c98" prot="public" virt="non-virtual"><scope>Hack::Chips::BitUtils</scope><name>unpack</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
