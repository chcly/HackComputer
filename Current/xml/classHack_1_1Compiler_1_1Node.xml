<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classHack_1_1Compiler_1_1Node" kind="class" language="C++" prot="public">
    <compoundname>Hack::Compiler::Node</compoundname>
    <includes local="no">Source/Compiler/Common/Node.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classHack_1_1Compiler_1_1Node_1a28e5b40bf7de91b6898fb330f14bce26" prot="public" static="no">
        <type><ref refid="classHack_1_1IndexCache" kindref="compound">IndexCache</ref>&lt; <ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> * &gt;</type>
        <definition>typedef IndexCache&lt;Node*&gt; Hack::Compiler::Node::Children</definition>
        <argsstring></argsstring>
        <name>Children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="34" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classHack_1_1Compiler_1_1Node_1a56fdafee8fa58e43456a0a0d52f36753" prot="public" static="no">
        <type>Children::Array::const_iterator</type>
        <definition>typedef Children::Array::const_iterator Hack::Compiler::Node::Iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="36" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classHack_1_1Compiler_1_1Node_1a331c811fe4cfc94fea950c3277f70706" prot="public" static="no">
        <type><ref refid="classHack_1_1IndexCache_1a35bba19b55830e0f1e0abbf57e4857eb" kindref="member">Children::Array</ref></type>
        <definition>typedef Children::Array Hack::Compiler::Node::NodeArray</definition>
        <argsstring></argsstring>
        <name>NodeArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="35" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1Node_1a824e7e7330fca64b2195a8fa8cd31576" prot="private" static="no" mutable="no">
        <type><ref refid="classHack_1_1Compiler_1_1Node_1a28e5b40bf7de91b6898fb330f14bce26" kindref="member">Children</ref></type>
        <definition>Children Hack::Compiler::Node::_children</definition>
        <argsstring></argsstring>
        <name>_children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="40" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1Node_1a47f122fd73a395fa9118e200010206ce" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Compiler::Node::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="43" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1Node_1ad35846efc5ec13ee7cc6719d3b253ac6" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Compiler::Node::_fileName</definition>
        <argsstring></argsstring>
        <name>_fileName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="44" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1Node_1af079cc77738fe1f74a9ee10861809dc8" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Hack::Compiler::Node::_line</definition>
        <argsstring></argsstring>
        <name>_line</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="45" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1Node_1ac07e3b4468640240ea6fd518eceaaa56" prot="private" static="no" mutable="no">
        <type><ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> *</type>
        <definition>Node* Hack::Compiler::Node::_parent</definition>
        <argsstring></argsstring>
        <name>_parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="39" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1Node_1a8db4d9afad2acdd077a843ca89219ce7" prot="private" static="no" mutable="no">
        <type>int8_t</type>
        <definition>int8_t Hack::Compiler::Node::_subtype</definition>
        <argsstring></argsstring>
        <name>_subtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="42" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1Node_1a3bf7e3b84b327b5f89e05cc204304463" prot="private" static="no" mutable="no">
        <type>int8_t</type>
        <definition>int8_t Hack::Compiler::Node::_type</definition>
        <argsstring></argsstring>
        <name>_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="41" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a70303f656751089be261040871e0f8ee" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> &amp;</type>
        <definition>const Node &amp; Hack::Compiler::Node::check</definition>
        <argsstring>(size_t idx, int8_t symbolId, bool generalCase) const</argsstring>
        <name>check</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>symbolId</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>generalCase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="47" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="63" bodyend="81"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a3613110b95e1e69282708e785baf31ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hack::Compiler::Node::Node</definition>
        <argsstring>()</argsstring>
        <name>Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="50" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a3e4983decb4fbd2a20602e4105eca5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hack::Compiler::Node::Node</definition>
        <argsstring>(int8_t type, String fileName, size_t line)</argsstring>
        <name>Node</name>
        <param>
          <type>int8_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="52" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="37" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a935a5dc66425f747a37e9cbb00a7e296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hack::Compiler::Node::Node</definition>
        <argsstring>(int8_t type, String data, String fileName, size_t line)</argsstring>
        <name>Node</name>
        <param>
          <type>int8_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="54" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="46" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a95688bc1ffe9d13b251dce7753c48789" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hack::Compiler::Node::~Node</definition>
        <argsstring>()</argsstring>
        <name>~Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="56" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a4bb11870ba0a870ecbe06b2a28798c33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classHack_1_1Compiler_1_1Node_1a56fdafee8fa58e43456a0a0d52f36753" kindref="member">Iterator</ref></type>
        <definition>Node::Iterator Hack::Compiler::Node::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="108" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="196" bodyend="199"/>
        <references refid="classHack_1_1IndexCache_1a937eb5cd44aa067611509f5559f09425" compoundref="IndexCache_8h" startline="106" endline="109">Hack::IndexCache&lt; T &gt;::begin</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a935305e1130db80fd4b0a0c212d332ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> &amp;</type>
        <definition>const Node &amp; Hack::Compiler::Node::child</definition>
        <argsstring>(size_t idx) const</argsstring>
        <name>child</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="100" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="119" bodyend="131"/>
        <references refid="classHack_1_1IndexCache_1a1c40fbac04597a5f4255de48cc2830c9" compoundref="IndexCache_8h" startline="95" endline="98">Hack::IndexCache&lt; T &gt;::size</references>
        <references refid="classHack_1_1IndexCache_1ab01608c27db3ac4be90bf52ce1d4c0c3" compoundref="IndexCache_8h" startline="59" endline="65">Hack::IndexCache&lt; T &gt;::at</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1ac4754a4c2acc61cca8547e90af0302c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classHack_1_1Compiler_1_1Node_1a28e5b40bf7de91b6898fb330f14bce26" kindref="member">Children</ref> &amp;</type>
        <definition>const Node::Children &amp; Hack::Compiler::Node::children</definition>
        <argsstring>() const</argsstring>
        <name>children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="96" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="184" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1ab8516a0d9eb149826a430421e93f5364" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> &amp;</type>
        <definition>const Node &amp; Hack::Compiler::Node::constant</definition>
        <argsstring>(size_t idx, int8_t symbolId=Constant) const</argsstring>
        <name>constant</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>symbolId</declname>
          <defval><ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa9315da8cb5f19dba0d77daddab7b0bd" kindref="member">Constant</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="78" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="102" bodyend="112"/>
        <references refid="classHack_1_1Compiler_1_1Node_1a935305e1130db80fd4b0a0c212d332ea" compoundref="Node_8cpp" startline="119" endline="131">child</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa9315da8cb5f19dba0d77daddab7b0bd" compoundref="NodeUtils_8h" startline="109">Hack::Compiler::Constant</references>
        <references refid="classHack_1_1Compiler_1_1Node_1a65a7432b8abdb49bb61f7dada9fa4741" compoundref="Node_8h" startline="159" endline="162">isConstant</references>
        <references refid="classHack_1_1Compiler_1_1Node_1a0657f866dcea3c30b986c3d50a8c17d6" compoundref="Node_8h" startline="139" endline="142">isTypeOf</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1acf83fba44c01bf57ce33850d76cfd099" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classHack_1_1Compiler_1_1Node_1a56fdafee8fa58e43456a0a0d52f36753" kindref="member">Iterator</ref></type>
        <definition>Node::Iterator Hack::Compiler::Node::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="110" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="201" bodyend="204"/>
        <references refid="classHack_1_1IndexCache_1a061f94f9c3f4b68039a653a682424d4c" compoundref="IndexCache_8h" startline="111" endline="114">Hack::IndexCache&lt; T &gt;::end</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a7159b0a48fe5e2fff5ffe0472666a016" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
        <definition>const String &amp; Hack::Compiler::Node::filename</definition>
        <argsstring>() const</argsstring>
        <name>filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="112" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1aa49a1a40217890353d8faf580c902369" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::Node::filename</definition>
        <argsstring>(const String &amp;fileName)</argsstring>
        <name>filename</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="114" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="211" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1af5cd8edbaaff484acb282eabbeb90c53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::Node::filter</definition>
        <argsstring>(NodeArray &amp;dest, int8_t symbolId) const</argsstring>
        <name>filter</name>
        <param>
          <type><ref refid="classHack_1_1Compiler_1_1Node_1a331c811fe4cfc94fea950c3277f70706" kindref="member">NodeArray</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>symbolId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="70" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a3bf15a924bfe1a3181545310c60a9917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::Node::insert</definition>
        <argsstring>(Node *node)</argsstring>
        <name>insert</name>
        <param>
          <type><ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> *</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="102" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="133" bodyend="140"/>
        <references refid="classHack_1_1IndexCache_1a049a43563b3a4a2b23e47a4da2425c3f" compoundref="IndexCache_8h" startline="41" endline="57">Hack::IndexCache&lt; T &gt;::insert</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a123f0394f2e3cfe35346873df5240a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::Node::insert</definition>
        <argsstring>(int8_t type, const String &amp;data, const String &amp;fileName, size_t line)</argsstring>
        <name>insert</name>
        <param>
          <type>int8_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="104" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="142" bodyend="148"/>
        <references refid="classHack_1_1Compiler_1_1Node_1a3bf15a924bfe1a3181545310c60a9917" compoundref="Node_8cpp" startline="133" endline="140">insert</references>
        <references refid="classHack_1_1Compiler_1_1Node_1a3613110b95e1e69282708e785baf31ee" compoundref="Node_8cpp" startline="28" endline="35">Node</references>
        <references refid="classHack_1_1Compiler_1_1Node_1a3d9e9126f78fd88ef8c67457b4c0ebff" compoundref="Node_8h" startline="124" endline="127">type</references>
        <references refid="classHack_1_1Compiler_1_1Node_1acf6445114923228acae712bf1396b0a0" compoundref="Node_8h" startline="216" endline="219">line</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a43da488058bb4cb45d90025ab3dda121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::Node::insert</definition>
        <argsstring>(int8_t type, const String &amp;fileName, size_t line)</argsstring>
        <name>insert</name>
        <param>
          <type>int8_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="106" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="150" bodyend="155"/>
        <references refid="classHack_1_1Compiler_1_1Node_1a3bf15a924bfe1a3181545310c60a9917" compoundref="Node_8cpp" startline="133" endline="140">insert</references>
        <references refid="classHack_1_1Compiler_1_1Node_1a3613110b95e1e69282708e785baf31ee" compoundref="Node_8cpp" startline="28" endline="35">Node</references>
        <references refid="classHack_1_1Compiler_1_1Node_1a3d9e9126f78fd88ef8c67457b4c0ebff" compoundref="Node_8h" startline="124" endline="127">type</references>
        <references refid="classHack_1_1Compiler_1_1Node_1acf6445114923228acae712bf1396b0a0" compoundref="Node_8h" startline="216" endline="219">line</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a65a7432b8abdb49bb61f7dada9fa4741" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Compiler::Node::isConstant</definition>
        <argsstring>() const</argsstring>
        <name>isConstant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="84" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="159" bodyend="162"/>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa9315da8cb5f19dba0d77daddab7b0bd" compoundref="NodeUtils_8h" startline="109">Hack::Compiler::Constant</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3c41789e6326c83d485d3915fe44cb32" compoundref="NodeUtils_8h" startline="119">Hack::Compiler::ConstantEnd</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a82524b6de28524b2592bb0c6ba321696" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Compiler::Node::isKeyword</definition>
        <argsstring>() const</argsstring>
        <name>isKeyword</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="82" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="154" bodyend="157"/>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ae20eb424b83e17c701a57261e73b9052" compoundref="NodeUtils_8h" startline="67">Hack::Compiler::Keyword</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3efd6e34626ea06664a4e2bfbde6ac58" compoundref="NodeUtils_8h" startline="85">Hack::Compiler::KeywordEnd</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1af430a726210ba49119654778c0464868" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Compiler::Node::isOperator</definition>
        <argsstring>() const</argsstring>
        <name>isOperator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="86" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="157" bodyend="177"/>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a4bd47378515d925ac6426c0c397e5a27" compoundref="NodeUtils_8h" startline="59">Hack::Compiler::RuleOperator</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6afe7e8673ff8860700e770e2afee945a2" compoundref="NodeUtils_8h" startline="60">Hack::Compiler::RuleUnaryOperator</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6abb1b9f57f66f57725a1527e2f7acaedf" compoundref="NodeUtils_8h" startline="101">Hack::Compiler::SymbolAnd</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7a5091b144812532ee7bf44dedd63781" compoundref="NodeUtils_8h" startline="102">Hack::Compiler::SymbolOr</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab1b59e86da4b072c9c28809e36054032" compoundref="NodeUtils_8h" startline="97">Hack::Compiler::SymbolPlus</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6acf933364f0a3278d3c703cae0290e773" compoundref="NodeUtils_8h" startline="98">Hack::Compiler::SymbolMinus</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a2a3779e8d88ff5f074b61b0fe92b0b58" compoundref="NodeUtils_8h" startline="99">Hack::Compiler::SymbolMultiply</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a249f0459fb4c38dfa2690f09164c6488" compoundref="NodeUtils_8h" startline="100">Hack::Compiler::SymbolDivide</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a32d4f45905602f6394b83e167fd7291e" compoundref="NodeUtils_8h" startline="105">Hack::Compiler::SymbolNot</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa1c4e8b5a4bedf3e787d4c9b338b162a" compoundref="NodeUtils_8h" startline="96">Hack::Compiler::SymbolEquals</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a07219731941d199649962cab568a10e9" compoundref="NodeUtils_8h" startline="103">Hack::Compiler::SymbolGreater</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aaf53fad5156cbe194d6ed4f960e18ec8" compoundref="NodeUtils_8h" startline="104">Hack::Compiler::SymbolLess</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a5159a3ebec4faae76ddc4e1a14910bbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Compiler::Node::isRule</definition>
        <argsstring>() const</argsstring>
        <name>isRule</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="80" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="149" bodyend="152"/>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a12d787097fb230c34304927acb58a558" compoundref="NodeUtils_8h" startline="31">Hack::Compiler::Rule</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a65ff4e8ff9a2f029c5724550f90d8431" compoundref="NodeUtils_8h" startline="65">Hack::Compiler::RuleEnd</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1ae6c61738410ef59f3a3a4995a949a306" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Compiler::Node::isSubtypeOf</definition>
        <argsstring>(int symbolId) const</argsstring>
        <name>isSubtypeOf</name>
        <param>
          <type>int</type>
          <declname>symbolId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="68" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a9133827ec5791d7df189dc0f54b6f7b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Compiler::Node::isSymbol</definition>
        <argsstring>() const</argsstring>
        <name>isSymbol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="88" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="164" bodyend="167"/>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aaf2cf666c2ba44b7ca371eb4b36991ce" compoundref="NodeUtils_8h" startline="87">Hack::Compiler::Symbol</references>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aac55360a9e63b95a0fe018110cee4891" compoundref="NodeUtils_8h" startline="107">Hack::Compiler::SymbolEnd</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a0657f866dcea3c30b986c3d50a8c17d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Compiler::Node::isTypeOf</definition>
        <argsstring>(int symbolId) const</argsstring>
        <name>isTypeOf</name>
        <param>
          <type>int</type>
          <declname>symbolId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="66" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1abfec6a8d042c927964a07f7d056e20b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> &amp;</type>
        <definition>const Node &amp; Hack::Compiler::Node::keyword</definition>
        <argsstring>(size_t idx, int8_t symbolId=Keyword) const</argsstring>
        <name>keyword</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>symbolId</declname>
          <defval><ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ae20eb424b83e17c701a57261e73b9052" kindref="member">Keyword</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="74" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="97" bodyend="100"/>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ae20eb424b83e17c701a57261e73b9052" compoundref="NodeUtils_8h" startline="67">Hack::Compiler::Keyword</references>
        <references refid="classHack_1_1Compiler_1_1Node_1a82524b6de28524b2592bb0c6ba321696" compoundref="Node_8h" startline="154" endline="157">isKeyword</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1acf6445114923228acae712bf1396b0a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const size_t &amp;</type>
        <definition>const size_t &amp; Hack::Compiler::Node::line</definition>
        <argsstring>() const</argsstring>
        <name>line</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="116" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a292863c5397bcb72f06c3d5b4cb0962a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> &amp;</type>
        <definition>const Node &amp; Hack::Compiler::Node::parent</definition>
        <argsstring>() const</argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="98" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="189" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1aa7c57338eea50c7abbb2a7a02e010ce7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> &amp;</type>
        <definition>const Node &amp; Hack::Compiler::Node::rule</definition>
        <argsstring>(size_t idx, int8_t symbolId=Rule) const</argsstring>
        <name>rule</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>symbolId</declname>
          <defval><ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a12d787097fb230c34304927acb58a558" kindref="member">Rule</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="72" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="92" bodyend="95"/>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a12d787097fb230c34304927acb58a558" compoundref="NodeUtils_8h" startline="31">Hack::Compiler::Rule</references>
        <references refid="classHack_1_1Compiler_1_1Node_1a5159a3ebec4faae76ddc4e1a14910bbc" compoundref="Node_8h" startline="149" endline="152">isRule</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a805b8ac5a719077c66a25244aaafaff3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Hack::Compiler::Node::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="94" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="179" bodyend="182"/>
        <references refid="classHack_1_1IndexCache_1a1c40fbac04597a5f4255de48cc2830c9" compoundref="IndexCache_8h" startline="95" endline="98">Hack::IndexCache&lt; T &gt;::size</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a43701e9300a09cc248e5393993d9f95b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::Node::subtype</definition>
        <argsstring>(int8_t type)</argsstring>
        <name>subtype</name>
        <param>
          <type>int8_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="62" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="129" bodyend="132"/>
        <references refid="classHack_1_1Compiler_1_1Node_1a3d9e9126f78fd88ef8c67457b4c0ebff" compoundref="Node_8h" startline="124" endline="127">type</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a008817f6586761609c00039dbf099fde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t Hack::Compiler::Node::subtype</definition>
        <argsstring>() const</argsstring>
        <name>subtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="64" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a4c71730d17d9a88977ef7e9d0f9797b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref> &amp;</type>
        <definition>const Node &amp; Hack::Compiler::Node::symbol</definition>
        <argsstring>(size_t idx, int8_t symbolId=Symbol) const</argsstring>
        <name>symbol</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>symbolId</declname>
          <defval><ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aaf2cf666c2ba44b7ca371eb4b36991ce" kindref="member">Symbol</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="76" column="1" bodyfile="Source/Compiler/Common/Node.cpp" bodystart="114" bodyend="117"/>
        <references refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aaf2cf666c2ba44b7ca371eb4b36991ce" compoundref="NodeUtils_8h" startline="87">Hack::Compiler::Symbol</references>
        <references refid="classHack_1_1Compiler_1_1Node_1a9133827ec5791d7df189dc0f54b6f7b5" compoundref="Node_8h" startline="164" endline="167">isSymbol</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a3b2715a2521b741f66f2592d66037d94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::Node::type</definition>
        <argsstring>(int8_t type)</argsstring>
        <name>type</name>
        <param>
          <type>int8_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="58" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="119" bodyend="122"/>
        <references refid="classHack_1_1Compiler_1_1Node_1a3d9e9126f78fd88ef8c67457b4c0ebff" compoundref="Node_8h" startline="124" endline="127">type</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a3d9e9126f78fd88ef8c67457b4c0ebff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t Hack::Compiler::Node::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="60" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a20e6fa06ee899f50ac30e9dafa0acdfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::Node::value</definition>
        <argsstring>(const String &amp;data)</argsstring>
        <name>value</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="90" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="169" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1Node_1a3340ccdfdc9dbb66fbd0ccd9fc24345c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
        <definition>const String &amp; Hack::Compiler::Node::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/Node.h" line="92" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="174" bodyend="177"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Source/Compiler/Common/Node.h" line="32" column="1" bodyfile="Source/Compiler/Common/Node.h" bodystart="31" bodyend="117"/>
    <listofallmembers>
      <member refid="classHack_1_1Compiler_1_1Node_1a824e7e7330fca64b2195a8fa8cd31576" prot="private" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>_children</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a47f122fd73a395fa9118e200010206ce" prot="private" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>_data</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1ad35846efc5ec13ee7cc6719d3b253ac6" prot="private" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>_fileName</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1af079cc77738fe1f74a9ee10861809dc8" prot="private" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>_line</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1ac07e3b4468640240ea6fd518eceaaa56" prot="private" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>_parent</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a8db4d9afad2acdd077a843ca89219ce7" prot="private" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>_subtype</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a3bf7e3b84b327b5f89e05cc204304463" prot="private" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>_type</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a4bb11870ba0a870ecbe06b2a28798c33" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>begin</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a70303f656751089be261040871e0f8ee" prot="private" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>check</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a935305e1130db80fd4b0a0c212d332ea" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>child</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a28e5b40bf7de91b6898fb330f14bce26" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>Children</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1ac4754a4c2acc61cca8547e90af0302c7" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>children</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1ab8516a0d9eb149826a430421e93f5364" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>constant</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1acf83fba44c01bf57ce33850d76cfd099" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>end</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a7159b0a48fe5e2fff5ffe0472666a016" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>filename</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1aa49a1a40217890353d8faf580c902369" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>filename</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1af5cd8edbaaff484acb282eabbeb90c53" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>filter</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a3bf15a924bfe1a3181545310c60a9917" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>insert</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a123f0394f2e3cfe35346873df5240a20" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>insert</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a43da488058bb4cb45d90025ab3dda121" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>insert</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a65a7432b8abdb49bb61f7dada9fa4741" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>isConstant</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a82524b6de28524b2592bb0c6ba321696" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>isKeyword</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1af430a726210ba49119654778c0464868" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>isOperator</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a5159a3ebec4faae76ddc4e1a14910bbc" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>isRule</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1ae6c61738410ef59f3a3a4995a949a306" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>isSubtypeOf</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a9133827ec5791d7df189dc0f54b6f7b5" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>isSymbol</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a0657f866dcea3c30b986c3d50a8c17d6" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>isTypeOf</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a56fdafee8fa58e43456a0a0d52f36753" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>Iterator</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1abfec6a8d042c927964a07f7d056e20b3" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>keyword</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1acf6445114923228acae712bf1396b0a0" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>line</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a3613110b95e1e69282708e785baf31ee" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>Node</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a3e4983decb4fbd2a20602e4105eca5a7" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>Node</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a935a5dc66425f747a37e9cbb00a7e296" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>Node</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a331c811fe4cfc94fea950c3277f70706" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>NodeArray</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a292863c5397bcb72f06c3d5b4cb0962a" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>parent</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1aa7c57338eea50c7abbb2a7a02e010ce7" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>rule</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a805b8ac5a719077c66a25244aaafaff3" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>size</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a43701e9300a09cc248e5393993d9f95b" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>subtype</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a008817f6586761609c00039dbf099fde" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>subtype</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a4c71730d17d9a88977ef7e9d0f9797b2" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>symbol</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a3b2715a2521b741f66f2592d66037d94" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>type</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a3d9e9126f78fd88ef8c67457b4c0ebff" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>type</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a20e6fa06ee899f50ac30e9dafa0acdfb" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>value</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a3340ccdfdc9dbb66fbd0ccd9fc24345c" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>value</name></member>
      <member refid="classHack_1_1Compiler_1_1Node_1a95688bc1ffe9d13b251dce7753c48789" prot="public" virt="non-virtual"><scope>Hack::Compiler::Node</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
