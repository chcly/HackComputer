<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classHack_1_1Computer_1_1AssemblyDebugger" kind="class" language="C++" prot="public" final="yes">
    <compoundname>Hack::Computer::AssemblyDebugger</compoundname>
    <basecompoundref refid="classHack_1_1Computer_1_1RuntimeInterface" prot="public" virt="non-virtual">Hack::Computer::RuntimeInterface</basecompoundref>
    <includes local="no">Source/Computer/AssemblyDebugger.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classHack_1_1Computer_1_1AssemblyDebugger_1ad6e4ff6d51218bb39cd86b21baa5d97a" prot="private" static="no" mutable="no">
        <type><ref refid="classHack_1_1Computer_1_1AssemblyDebuggerPrivate" kindref="compound">AssemblyDebuggerPrivate</ref> *</type>
        <definition>AssemblyDebuggerPrivate* Hack::Computer::AssemblyDebugger::_private</definition>
        <argsstring></argsstring>
        <name>_private</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="33" column="1" bodyfile="Source/Computer/AssemblyDebugger.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classHack_1_1Computer_1_1AssemblyDebugger_1a567a623c6ae11ed52a278df52adf8b2a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int16_t</type>
        <definition>int16_t Hack::Computer::AssemblyDebugger::getRate</definition>
        <argsstring>() const override</argsstring>
        <name>getRate</name>
        <reimplements refid="classHack_1_1Computer_1_1RuntimeInterface_1a0f5eca7470888a3c5190dd9c1ddc3f67">getRate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="35" column="1" bodyfile="Source/Computer/AssemblyDebugger.h" bodystart="35" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classHack_1_1Computer_1_1AssemblyDebugger_1a7d5d7b1c609590b7a669b7c8c35285d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hack::Computer::AssemblyDebugger::AssemblyDebugger</definition>
        <argsstring>()</argsstring>
        <name>AssemblyDebugger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="41" column="1" bodyfile="Source/Computer/AssemblyDebugger.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Computer_1_1AssemblyDebugger_1a2634e743ce914932fc43574f58847f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hack::Computer::AssemblyDebugger::~AssemblyDebugger</definition>
        <argsstring>() override</argsstring>
        <name>~AssemblyDebugger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="43" column="1" bodyfile="Source/Computer/AssemblyDebugger.cpp" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Computer_1_1AssemblyDebugger_1a42c2b7ccf57e4dba73dc1b2c61f9bc33" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Hack::Computer::AssemblyDebugger::exitRequest</definition>
        <argsstring>() const override</argsstring>
        <name>exitRequest</name>
        <reimplements refid="classHack_1_1Computer_1_1RuntimeInterface_1ae4fb11811510339381b65be887827dfc">exitRequest</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="49" column="1" bodyfile="Source/Computer/AssemblyDebugger.cpp" bodystart="54" bodyend="57"/>
        <references refid="classHack_1_1Computer_1_1AssemblyDebuggerPrivate_1afb51eb65e5f8087dc737b3911254bce4" compoundref="AssemblyDebuggerPrivate_8cpp" startline="84" endline="87">Hack::Computer::AssemblyDebuggerPrivate::input</references>
        <references refid="namespaceHack_1_1Ui_1a7553833a41980e8c2bae00177d41129ead7a3bc54fb41225d6588c6fb307f0bcf" compoundref="Utils_2UserInterface_2Common_8h" startline="91">Hack::Ui::PR_EXIT</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Computer_1_1AssemblyDebugger_1aa1022c0781d5554e9c05f4189c0e1b0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Hack::Computer::AssemblyDebugger::flushMemory</definition>
        <argsstring>(Chips::Computer *computer) const override</argsstring>
        <name>flushMemory</name>
        <reimplements refid="classHack_1_1Computer_1_1RuntimeInterface_1af845999e44531fc6282d028402131fa9">flushMemory</reimplements>
        <param>
          <type><ref refid="classHack_1_1Chips_1_1Computer" kindref="compound">Chips::Computer</ref> *</type>
          <declname>computer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="53" column="1" bodyfile="Source/Computer/AssemblyDebugger.cpp" bodystart="64" bodyend="69"/>
        <references refid="classHack_1_1Chips_1_1Computer_1a2dbfa6b9bb02786f4e91770527d8624b" compoundref="Computer_8cpp" startline="81" endline="102">Hack::Chips::Computer::captureState</references>
        <references refid="classHack_1_1Computer_1_1AssemblyDebuggerPrivate_1a27803ed3d2856b0f50920127200df914" compoundref="AssemblyDebuggerPrivate_8cpp" startline="117" endline="127">Hack::Computer::AssemblyDebuggerPrivate::flushMemory</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Computer_1_1AssemblyDebugger_1a769998f026df9081f6b17b001bac8511" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Hack::Computer::AssemblyDebugger::initialize</definition>
        <argsstring>(Chips::Computer *computer, Chips::Screen *) const override</argsstring>
        <name>initialize</name>
        <reimplements refid="classHack_1_1Computer_1_1RuntimeInterface_1acfdf1e97cbbcc9a9f13ad26e6062b8d0">initialize</reimplements>
        <param>
          <type><ref refid="classHack_1_1Chips_1_1Computer" kindref="compound">Chips::Computer</ref> *</type>
          <declname>computer</declname>
        </param>
        <param>
          <type><ref refid="namespaceHack_1_1Chips_1a205aa97050ad01560145252139c81057" kindref="member">Chips::Screen</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="47" column="1" bodyfile="Source/Computer/AssemblyDebugger.cpp" bodystart="47" bodyend="52"/>
        <references refid="classHack_1_1Computer_1_1AssemblyDebuggerPrivate_1a6cdaa048556604ceb27738899706efe0" compoundref="AssemblyDebuggerPrivate_8cpp" startline="67" endline="82">Hack::Computer::AssemblyDebuggerPrivate::initialize</references>
        <references refid="classHack_1_1Computer_1_1AssemblyDebuggerPrivate_1a27803ed3d2856b0f50920127200df914" compoundref="AssemblyDebuggerPrivate_8cpp" startline="117" endline="127">Hack::Computer::AssemblyDebuggerPrivate::flushMemory</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Computer_1_1AssemblyDebugger_1a80da5b23022b1ee96518ab4ea6d98d8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Hack::Computer::AssemblyDebugger::processEvents</definition>
        <argsstring>(Chips::Computer *computer) const override</argsstring>
        <name>processEvents</name>
        <reimplements refid="classHack_1_1Computer_1_1RuntimeInterface_1a3cb1ab52903aaedabb0c9d49b013aab4">processEvents</reimplements>
        <param>
          <type><ref refid="classHack_1_1Chips_1_1Computer" kindref="compound">Chips::Computer</ref> *</type>
          <declname>computer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="51" column="1" bodyfile="Source/Computer/AssemblyDebugger.cpp" bodystart="59" bodyend="62"/>
        <references refid="classHack_1_1Computer_1_1AssemblyDebuggerPrivate_1afcab84b5572bf7e963fcd26daf00c3b6" compoundref="AssemblyDebuggerPrivate_8cpp" startline="94" endline="115">Hack::Computer::AssemblyDebuggerPrivate::processEvents</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Computer_1_1AssemblyDebugger_1afbe000a9ca7d078daa06b945fa116195" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Hack::Computer::AssemblyDebugger::shouldUpdate</definition>
        <argsstring>() override</argsstring>
        <name>shouldUpdate</name>
        <reimplements refid="classHack_1_1Computer_1_1RuntimeInterface_1a44e6d9da00af26f22941e1a0a540e797">shouldUpdate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="45" column="1" bodyfile="Source/Computer/AssemblyDebugger.cpp" bodystart="40" bodyend="45"/>
        <references refid="classHack_1_1Computer_1_1AssemblyDebuggerPrivate_1afb51eb65e5f8087dc737b3911254bce4" compoundref="AssemblyDebuggerPrivate_8cpp" startline="84" endline="87">Hack::Computer::AssemblyDebuggerPrivate::input</references>
        <references refid="namespaceHack_1_1Ui_1a7553833a41980e8c2bae00177d41129ea35bf1e881e438245e59ccdf1cd1d0774" compoundref="Utils_2UserInterface_2Common_8h" startline="132">Hack::Ui::PR_UP_ARROW</references>
        <references refid="namespaceHack_1_1Ui_1a7553833a41980e8c2bae00177d41129eadce783d1df91b3fd26fd5817f0ff07c6" compoundref="Utils_2UserInterface_2Common_8h" startline="122">Hack::Ui::PR_R</references>
        <references refid="classHack_1_1Computer_1_1AssemblyDebuggerPrivate_1a27c3ae2ed36e248c6e739255a84eded1" compoundref="AssemblyDebuggerPrivate_8cpp" startline="89" endline="92">Hack::Computer::AssemblyDebuggerPrivate::block</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Computer_1_1AssemblyDebugger_1aaaeff2c78bffc2af719fbae9239a5edd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Hack::Computer::AssemblyDebugger::update</definition>
        <argsstring>(Chips::Computer *computer) const override</argsstring>
        <name>update</name>
        <reimplements refid="classHack_1_1Computer_1_1RuntimeInterface_1a5fe5dfa099bbf6ded85b29028440466d">update</reimplements>
        <param>
          <type><ref refid="classHack_1_1Chips_1_1Computer" kindref="compound">Chips::Computer</ref> *</type>
          <declname>computer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Computer/AssemblyDebugger.h" line="55" column="1" bodyfile="Source/Computer/AssemblyDebugger.cpp" bodystart="71" bodyend="75"/>
        <references refid="classHack_1_1Chips_1_1Computer_1aa44e98396b5191c503bd5255fe0ffa1f" compoundref="Computer_8cpp" startline="105" endline="138">Hack::Chips::Computer::update</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="361">
        <label>Hack::Computer::AssemblyDebugger</label>
        <link refid="classHack_1_1Computer_1_1AssemblyDebugger"/>
        <childnode refid="362" relation="public-inheritance">
        </childnode>
      </node>
      <node id="362">
        <label>Hack::Computer::RuntimeInterface</label>
        <link refid="classHack_1_1Computer_1_1RuntimeInterface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="363">
        <label>Hack::Computer::AssemblyDebugger</label>
        <link refid="classHack_1_1Computer_1_1AssemblyDebugger"/>
        <childnode refid="364" relation="public-inheritance">
        </childnode>
      </node>
      <node id="364">
        <label>Hack::Computer::RuntimeInterface</label>
        <link refid="classHack_1_1Computer_1_1RuntimeInterface"/>
      </node>
    </collaborationgraph>
    <location file="Source/Computer/AssemblyDebugger.h" line="31" column="1" bodyfile="Source/Computer/AssemblyDebugger.h" bodystart="30" bodyend="56"/>
    <listofallmembers>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1ad6e4ff6d51218bb39cd86b21baa5d97a" prot="private" virt="non-virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>_private</name></member>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1a7d5d7b1c609590b7a669b7c8c35285d4" prot="public" virt="non-virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>AssemblyDebugger</name></member>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1a42c2b7ccf57e4dba73dc1b2c61f9bc33" prot="public" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>exitRequest</name></member>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1aa1022c0781d5554e9c05f4189c0e1b0d" prot="public" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>flushMemory</name></member>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1a567a623c6ae11ed52a278df52adf8b2a" prot="private" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>getRate</name></member>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1a769998f026df9081f6b17b001bac8511" prot="public" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>initialize</name></member>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1a80da5b23022b1ee96518ab4ea6d98d8e" prot="public" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>processEvents</name></member>
      <member refid="classHack_1_1Computer_1_1RuntimeInterface_1abcf9f603a7a55918f648318629fc07f7" prot="public" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>setInstructions</name></member>
      <member refid="classHack_1_1Computer_1_1RuntimeInterface_1afac6241dfa4f6de4ca3353819786e5e3" prot="public" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>setRate</name></member>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1afbe000a9ca7d078daa06b945fa116195" prot="public" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>shouldUpdate</name></member>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1aaaeff2c78bffc2af719fbae9239a5edd" prot="public" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>update</name></member>
      <member refid="classHack_1_1Computer_1_1AssemblyDebugger_1a2634e743ce914932fc43574f58847f0c" prot="public" virt="non-virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>~AssemblyDebugger</name></member>
      <member refid="classHack_1_1Computer_1_1RuntimeInterface_1a3e09aeb7e6d6907b58f7a2a40636ac37" prot="public" virt="virtual"><scope>Hack::Computer::AssemblyDebugger</scope><name>~RuntimeInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
