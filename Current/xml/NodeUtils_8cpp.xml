<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="NodeUtils_8cpp" kind="file" language="C++">
    <compoundname>NodeUtils.cpp</compoundname>
    <includes refid="NodeUtils_8h" local="yes">Compiler/Common/NodeUtils.h</includes>
    <includes refid="Node_8h" local="yes">Node.h</includes>
    <incdepgraph>
      <node id="2502">
        <label>functional</label>
      </node>
      <node id="2506">
        <label>Utils/Exception.h</label>
        <childnode refid="2507" relation="include">
        </childnode>
        <childnode refid="2508" relation="include">
        </childnode>
        <childnode refid="2509" relation="include">
        </childnode>
        <childnode refid="2510" relation="include">
        </childnode>
        <childnode refid="2497" relation="include">
        </childnode>
      </node>
      <node id="2495">
        <label>Source/Compiler/Common/NodeUtils.cpp</label>
        <link refid="NodeUtils_8cpp"/>
        <childnode refid="2496" relation="include">
        </childnode>
        <childnode refid="2501" relation="include">
        </childnode>
      </node>
      <node id="2513">
        <label>cstdint</label>
      </node>
      <node id="2501">
        <label>Node.h</label>
        <childnode refid="2502" relation="include">
        </childnode>
        <childnode refid="2500" relation="include">
        </childnode>
        <childnode refid="2496" relation="include">
        </childnode>
        <childnode refid="2503" relation="include">
        </childnode>
        <childnode refid="2497" relation="include">
        </childnode>
      </node>
      <node id="2511">
        <label>UserInterface/Context.h</label>
        <childnode refid="2497" relation="include">
        </childnode>
        <childnode refid="2512" relation="include">
        </childnode>
        <childnode refid="2514" relation="include">
        </childnode>
      </node>
      <node id="2508">
        <label>stdexcept</label>
      </node>
      <node id="2499">
        <label>string</label>
      </node>
      <node id="2505">
        <label>unordered_set</label>
      </node>
      <node id="2507">
        <label>exception</label>
      </node>
      <node id="2512">
        <label>Utils/UserInterface/Common.h</label>
        <childnode refid="2513" relation="include">
        </childnode>
      </node>
      <node id="2497">
        <label>Utils/String.h</label>
        <childnode refid="2498" relation="include">
        </childnode>
        <childnode refid="2499" relation="include">
        </childnode>
        <childnode refid="2500" relation="include">
        </childnode>
      </node>
      <node id="2503">
        <label>Utils/IndexCache.h</label>
        <childnode refid="2504" relation="include">
        </childnode>
        <childnode refid="2505" relation="include">
        </childnode>
        <childnode refid="2506" relation="include">
        </childnode>
      </node>
      <node id="2500">
        <label>vector</label>
      </node>
      <node id="2509">
        <label>utility</label>
      </node>
      <node id="2498">
        <label>sstream</label>
      </node>
      <node id="2504">
        <label>unordered_map</label>
      </node>
      <node id="2514">
        <label>Utils/UserInterface/Math.h</label>
        <childnode refid="2513" relation="include">
        </childnode>
        <childnode refid="2500" relation="include">
        </childnode>
        <childnode refid="2512" relation="include">
        </childnode>
      </node>
      <node id="2496">
        <label>Compiler/Common/NodeUtils.h</label>
        <childnode refid="2497" relation="include">
        </childnode>
      </node>
      <node id="2510">
        <label>Utils/Console.h</label>
        <childnode refid="2497" relation="include">
        </childnode>
        <childnode refid="2511" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceHack_1_1Compiler">Hack::Compiler</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="NodeUtils_8cpp_1a4987d675af86cbea34e5087834a0278e" prot="public" static="no">
        <name>BEGIN_ENUM_TO_STR</name>
        <param><defname>x</defname></param>
        <param><defname>d</defname></param>
        <initializer>switch (x)               \
    {                        \
    default:                 \
        dest = d;    \
        break</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/NodeUtils.cpp" line="25" column="9" bodyfile="Source/Compiler/Common/NodeUtils.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="NodeUtils_8cpp_1aeb1755c684ce6c19657ef1a9d6f7aa46" prot="public" static="no">
        <name>CASE_TO_STR_A</name>
        <param><defname>x</defname></param>
        <initializer>case x:              \
        dest = #x;       \
        break</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/NodeUtils.cpp" line="35" column="9" bodyfile="Source/Compiler/Common/NodeUtils.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="NodeUtils_8cpp_1a52a3c03a2f37d15afa1c6e79dfa0337d" prot="public" static="no">
        <name>CASE_TO_STR_F</name>
        <param><defname>x</defname></param>
        <initializer>case x:</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/NodeUtils.cpp" line="32" column="9" bodyfile="Source/Compiler/Common/NodeUtils.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="NodeUtils_8cpp_1a2cd42b542e24f49f7f7ccce384ff6b10" prot="public" static="no">
        <name>CASE_TO_STR_V</name>
        <param><defname>x</defname></param>
        <param><defname>v</defname></param>
        <initializer>case x:                 \
        dest = v;           \
        break</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/NodeUtils.cpp" line="39" column="9" bodyfile="Source/Compiler/Common/NodeUtils.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="NodeUtils_8cpp_1a86000088087468298a3a70c1a6348775" prot="public" static="no">
        <name>END_ENUM_TO_STR</name>
        <param></param>
        <initializer>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Common/NodeUtils.cpp" line="44" column="9" bodyfile="Source/Compiler/Common/NodeUtils.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">-------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>Charles<sp/>Carley.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">-------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Compiler/Common/NodeUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Node.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BEGIN_ENUM_TO_STR(x,<sp/>d)<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>switch<sp/>(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>default:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>d;<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CASE_TO_STR_F(x)<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>x:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CASE_TO_STR_A(x)<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>#x;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CASE_TO_STR_V(x,<sp/>v)<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>case<sp/>x:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>=<sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>END_ENUM_TO_STR()<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceHack_1_1Compiler" kindref="compound">Hack::Compiler</ref></highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48" refid="classHack_1_1Compiler_1_1NodeUtils_1a94e7f1532c5032beadb07e27a83792e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Compiler_1_1NodeUtils_1a94e7f1532c5032beadb07e27a83792e7" kindref="member" tooltip="Returns a exact string representation of the enum name ">NodeUtils::nodeTypeString</ref>(<ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref>&amp;<sp/>dest,<sp/><ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>=<sp/><ref refid="classHack_1_1Compiler_1_1NodeUtils_1a26e442f75c28641c4cc95546dc3bef16" kindref="member" tooltip="Returns a exact string representation of the enum name ">string</ref>(node-&gt;<ref refid="classHack_1_1Compiler_1_1Node_1a3b2715a2521b741f66f2592d66037d94" kindref="member">type</ref>());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classHack_1_1Compiler_1_1NodeUtils_1a26e442f75c28641c4cc95546dc3bef16" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref><sp/><ref refid="classHack_1_1Compiler_1_1NodeUtils_1a26e442f75c28641c4cc95546dc3bef16" kindref="member" tooltip="Returns a exact string representation of the enum name ">NodeUtils::string</ref>(int8_t<sp/>type)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref><sp/>dest;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEGIN_ENUM_TO_STR(type,<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a12d787097fb230c34304927acb58a558" kindref="member">Rule</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6af5fb400704892777118abdccc81b9194" kindref="member">RuleClass</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa4a86eb5c36e73c82c0e65cb88c87860" kindref="member">RuleClassDescription</ref>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6af895d92a3471ae1dd81db116cb5683e4" kindref="member">RuleField</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a83868e546ba4cf0544f7b704c9ad32ff" kindref="member">RuleDataType</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a74a4a6265f456fe0176393106c407b6e" kindref="member">RuleFieldSpecification</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a379776fb31e81b1baa8e37d597eb24a4" kindref="member">RuleIdentifierList</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ad395ed3a48e79f471aa48780ebdc3ff1" kindref="member">RuleMethod</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a8e21b2c6a1e2c1820fd46de24934b033" kindref="member">RuleMethodSpecification</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a494bc4f5cb9c004cd62bfb5390eb7a33" kindref="member">RuleMethodReturnType</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6acd4325f3ac0a467e6fefcb9bc2a57861" kindref="member">RuleMethodBody</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3f94a6a03101d7a4403e12934a7dd99d" kindref="member">RuleBody</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab2900197084b999d0d27771e8326970f" kindref="member">RuleVariable</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ac1dea96e8aa8912884cd00534d5be418" kindref="member">RuleStatement</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6acfa63bed354357c7c65733160ef9f4fa" kindref="member">RuleLetStatement</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ad6c4df62cebed24c57fb5cf1cc636f8d" kindref="member">RuleIfStatement</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a26dae7be723fdf8ba71202d29625f6f5" kindref="member">RuleElseStatement</ref>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a303329c590b8ca9e53bbac315017d365" kindref="member">RuleWhileStatement</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ac0729f0dd5d255b9aa667cd581da95f4" kindref="member">RuleDoStatement</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a87934873c24cbdc44c8fa785781b29d7" kindref="member">RuleReturnStatement</ref>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aeac707ada70e601bbfc8325327da5dcb" kindref="member">RuleStatementList</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a46ca516f5cbcd46c3029be456b9f500d" kindref="member">RuleExpression</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a25ea761d296db24a901341598d7d4852" kindref="member">RuleSingleExpression</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a9d0ef264a545c5117c990415ff883634" kindref="member">RuleTerm</ref>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a031b1a025a73129dff8de9246e61e2f2" kindref="member">RuleSimpleTerm</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3bd0a9809c3b1c83912b72eceb6cf4f5" kindref="member">RuleComplexTerm</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a4bd47378515d925ac6426c0c397e5a27" kindref="member">RuleOperator</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6afe7e8673ff8860700e770e2afee945a2" kindref="member">RuleUnaryOperator</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a8d902d19f27773b8272d3f48adf6f135" kindref="member">RuleExpressionList</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a228d7822b0f80c89a86e450a24d68ce4" kindref="member">RuleCallMethod</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7796c9aacca84a379e90aa2b1438901e" kindref="member">RuleParameterList</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7988966264071c4fc121bed42d6ae205" kindref="member">RuleParameter</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6afe32ecf4dda649e33924606d05e85ccd" kindref="member">RuleInlineVm</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6acbaba7a7dcfa3aeec822934d931f42c1" kindref="member">RuleInlineAsm</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a65ff4e8ff9a2f029c5724550f90d8431" kindref="member">RuleEnd</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ae20eb424b83e17c701a57261e73b9052" kindref="member">Keyword</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ac31a70cbd9d9151351ffbe21b039ae4e" kindref="member">KeywordClass</ref>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ae581171931b8bf6afb42ff9893d97ab0" kindref="member">KeywordConstructor</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab26ac14d93f8a31f192b0e508f684a77" kindref="member">KeywordFunction</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa0c2dc86da0f80dd9612abd2a3a77dd6" kindref="member">KeywordMethod</ref>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a8a27d8c907bccbea7451f6dd392bad75" kindref="member">KeywordField</ref>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a11680baf7488776f4bc0734b10035bc9" kindref="member">KeywordStatic</ref>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a2ba36ac2824b8af6298d1ba5bf5e4a06" kindref="member">KeywordInt</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a97fc1d604682922b0b57eb05eaf7ed8a" kindref="member">KeywordChar</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a4b6ed4a9c930866c2c694b2fc9d01fb9" kindref="member">KeywordBool</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a5e0ca93da96ca2f39af10ed3f861e8c4" kindref="member">KeywordVoid</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a4685a031adea4dbe1e7f657025fce740" kindref="member">KeywordVar</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7e5161b02ebb6784a0606285eb12dfd4" kindref="member">KeywordLet</ref>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3a4ecc30d87ec79169e2bc7448a26b12" kindref="member">KeywordIf</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a4c5a4ed9b73dd86745fcc5ce46e6edae" kindref="member">KeywordElse</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a5229615543f1151e305ba04f60d8b9b8" kindref="member">KeywordDo</ref>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa4144c1216383931b91e4d06d8f2e5b9" kindref="member">KeywordWhile</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a94e18e9f169344d2cc5308c7ae3cb4cc" kindref="member">KeywordReturn</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3efd6e34626ea06664a4e2bfbde6ac58" kindref="member">KeywordEnd</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aaf2cf666c2ba44b7ca371eb4b36991ce" kindref="member">Symbol</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a2f8793e1c7bae9e986497c01c2be40f2" kindref="member">SymbolOpenBrace</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a1b36db2997870e3f4750fe2bdacc1bf2" kindref="member">SymbolCloseBrace</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ad186637e1f78fd0001af6cf552da87f5" kindref="member">SymbolSemiColon</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7449b679a50e24f41705008788c90370" kindref="member">SymbolLeftParenthesis</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab2c061b2efd2fbdd428ece15ed05ec27" kindref="member">SymbolRightParenthesis</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a1c5da8e6a44118cb7af19c5966f611ab" kindref="member">SymbolLeftBracket</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a8f7acc7cd1aa8763a3ec7c0723d3db3d" kindref="member">SymbolRightBracket</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a69239f8c8f83820d5a13ad527a91316e" kindref="member">SymbolComma</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa1c4e8b5a4bedf3e787d4c9b338b162a" kindref="member">SymbolEquals</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab1b59e86da4b072c9c28809e36054032" kindref="member">SymbolPlus</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6acf933364f0a3278d3c703cae0290e773" kindref="member">SymbolMinus</ref>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a2a3779e8d88ff5f074b61b0fe92b0b58" kindref="member">SymbolMultiply</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a249f0459fb4c38dfa2690f09164c6488" kindref="member">SymbolDivide</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6abb1b9f57f66f57725a1527e2f7acaedf" kindref="member">SymbolAnd</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7a5091b144812532ee7bf44dedd63781" kindref="member">SymbolOr</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a07219731941d199649962cab568a10e9" kindref="member">SymbolGreater</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aaf53fad5156cbe194d6ed4f960e18ec8" kindref="member">SymbolLess</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a32d4f45905602f6394b83e167fd7291e" kindref="member">SymbolNot</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6af78cd3fd81595b5027563fc46de176bd" kindref="member">SymbolPeriod</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aac55360a9e63b95a0fe018110cee4891" kindref="member">SymbolEnd</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa9315da8cb5f19dba0d77daddab7b0bd" kindref="member">Constant</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a99979f3b0a7ec4669e64804412671e01" kindref="member">ConstantIdentifier</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6afbd47c44db84d19153a2178f5852a6e0" kindref="member">ConstantInteger</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3bedb2300b4e67173eba51e3ab99c230" kindref="member">ConstantString</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ad8221a84d21471ea7ad0dd3ecc349b12" kindref="member">ConstantInlineVm</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a89061fb26c3f0c298b55ffca768debe8" kindref="member">ConstantInlineAsm</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a28c9451c0059f6fa453a7204a9c043be" kindref="member">ConstantTrue</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab42502c51c876d73e971e0b0db8a656e" kindref="member">ConstantFalse</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ac8ac251b2349e2ea86042e71aec4f317" kindref="member">ConstantNull</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a2534a9437f7adc210d06c1b351ed4445" kindref="member">ConstantThis</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3c41789e6326c83d485d3915fe44cb32" kindref="member">ConstantEnd</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a6a900f6dff7c1a6f57cc24896d7b4f10" kindref="member">SubtypeNone</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa0d8352ed2ca08217f9dc2b3ca635df4" kindref="member">SubtypeExpressionGroup</ref>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a22c529bdbb52ad409d9243fab183552b" kindref="member">SubtypeCall</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7ffb8ab9b38b4b338d446fc1ba39ad29" kindref="member">SubtypeCallFunction</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a1cf72edfd7c12952849fd910e83f4052" kindref="member">SubtypeCallMethod</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a41bd191826e40afa0260afee2fdaa6d6" kindref="member">SubtypeArrayIndex</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a709cc210e1ab40744609244d1f7a3f8b" kindref="member">SubtypeIfElseCombo</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a15bb148de2293807ec093fde1f2c22d5" kindref="member">SubtypeTerm</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a19aa4a2351849e73de63c6464515bbcb" kindref="member">SubtypeOpTerm</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a332598b2aac0805651f0039b3ff545fc" kindref="member">SubtypeLetEqual</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a82b15984274411f0ed2e4fbc86f8c073" kindref="member">SubtypeLetArrayEqual</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>END_ENUM_TO_STR()</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dest;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classHack_1_1Compiler_1_1NodeUtils_1ad90f4a993ae2906e55130aba4d6e8e70" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Compiler_1_1NodeUtils_1ad90f4a993ae2906e55130aba4d6e8e70" kindref="member" tooltip="Returns an XML representation of the enum name ">NodeUtils::nodeTypeXmlString</ref>(<ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref>&amp;<sp/>dest,<sp/><ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEGIN_ENUM_TO_STR(node-&gt;<ref refid="classHack_1_1Compiler_1_1Node_1a3b2715a2521b741f66f2592d66037d94" kindref="member">type</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a12d787097fb230c34304927acb58a558" kindref="member">Rule</ref>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6af5fb400704892777118abdccc81b9194" kindref="member">RuleClass</ref>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa4a86eb5c36e73c82c0e65cb88c87860" kindref="member">RuleClassDescription</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6af895d92a3471ae1dd81db116cb5683e4" kindref="member">RuleField</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a83868e546ba4cf0544f7b704c9ad32ff" kindref="member">RuleDataType</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a74a4a6265f456fe0176393106c407b6e" kindref="member">RuleFieldSpecification</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a379776fb31e81b1baa8e37d597eb24a4" kindref="member">RuleIdentifierList</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ad395ed3a48e79f471aa48780ebdc3ff1" kindref="member">RuleMethod</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a8e21b2c6a1e2c1820fd46de24934b033" kindref="member">RuleMethodSpecification</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a494bc4f5cb9c004cd62bfb5390eb7a33" kindref="member">RuleMethodReturnType</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6acd4325f3ac0a467e6fefcb9bc2a57861" kindref="member">RuleMethodBody</ref>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3f94a6a03101d7a4403e12934a7dd99d" kindref="member">RuleBody</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab2900197084b999d0d27771e8326970f" kindref="member">RuleVariable</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ac1dea96e8aa8912884cd00534d5be418" kindref="member">RuleStatement</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6acfa63bed354357c7c65733160ef9f4fa" kindref="member">RuleLetStatement</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ad6c4df62cebed24c57fb5cf1cc636f8d" kindref="member">RuleIfStatement</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a26dae7be723fdf8ba71202d29625f6f5" kindref="member">RuleElseStatement</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a303329c590b8ca9e53bbac315017d365" kindref="member">RuleWhileStatement</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ac0729f0dd5d255b9aa667cd581da95f4" kindref="member">RuleDoStatement</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a87934873c24cbdc44c8fa785781b29d7" kindref="member">RuleReturnStatement</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aeac707ada70e601bbfc8325327da5dcb" kindref="member">RuleStatementList</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a46ca516f5cbcd46c3029be456b9f500d" kindref="member">RuleExpression</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a25ea761d296db24a901341598d7d4852" kindref="member">RuleSingleExpression</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a9d0ef264a545c5117c990415ff883634" kindref="member">RuleTerm</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a031b1a025a73129dff8de9246e61e2f2" kindref="member">RuleSimpleTerm</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3bd0a9809c3b1c83912b72eceb6cf4f5" kindref="member">RuleComplexTerm</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a4bd47378515d925ac6426c0c397e5a27" kindref="member">RuleOperator</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6afe7e8673ff8860700e770e2afee945a2" kindref="member">RuleUnaryOperator</ref>);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a8d902d19f27773b8272d3f48adf6f135" kindref="member">RuleExpressionList</ref>);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a228d7822b0f80c89a86e450a24d68ce4" kindref="member">RuleCallMethod</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7796c9aacca84a379e90aa2b1438901e" kindref="member">RuleParameterList</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7988966264071c4fc121bed42d6ae205" kindref="member">RuleParameter</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6afe32ecf4dda649e33924606d05e85ccd" kindref="member">RuleInlineVm</ref>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6acbaba7a7dcfa3aeec822934d931f42c1" kindref="member">RuleInlineAsm</ref>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a65ff4e8ff9a2f029c5724550f90d8431" kindref="member">RuleEnd</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ae20eb424b83e17c701a57261e73b9052" kindref="member">Keyword</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ac31a70cbd9d9151351ffbe21b039ae4e" kindref="member">KeywordClass</ref>,<sp/></highlight><highlight class="stringliteral">&quot;class&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ae581171931b8bf6afb42ff9893d97ab0" kindref="member">KeywordConstructor</ref>,<sp/></highlight><highlight class="stringliteral">&quot;constructor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab26ac14d93f8a31f192b0e508f684a77" kindref="member">KeywordFunction</ref>,<sp/></highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa0c2dc86da0f80dd9612abd2a3a77dd6" kindref="member">KeywordMethod</ref>,<sp/></highlight><highlight class="stringliteral">&quot;method&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a8a27d8c907bccbea7451f6dd392bad75" kindref="member">KeywordField</ref>,<sp/></highlight><highlight class="stringliteral">&quot;field&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a11680baf7488776f4bc0734b10035bc9" kindref="member">KeywordStatic</ref>,<sp/></highlight><highlight class="stringliteral">&quot;static&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a2ba36ac2824b8af6298d1ba5bf5e4a06" kindref="member">KeywordInt</ref>,<sp/></highlight><highlight class="stringliteral">&quot;int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a97fc1d604682922b0b57eb05eaf7ed8a" kindref="member">KeywordChar</ref>,<sp/></highlight><highlight class="stringliteral">&quot;char&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a4b6ed4a9c930866c2c694b2fc9d01fb9" kindref="member">KeywordBool</ref>,<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a5e0ca93da96ca2f39af10ed3f861e8c4" kindref="member">KeywordVoid</ref>,<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a4685a031adea4dbe1e7f657025fce740" kindref="member">KeywordVar</ref>,<sp/></highlight><highlight class="stringliteral">&quot;var&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7e5161b02ebb6784a0606285eb12dfd4" kindref="member">KeywordLet</ref>,<sp/></highlight><highlight class="stringliteral">&quot;let&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3a4ecc30d87ec79169e2bc7448a26b12" kindref="member">KeywordIf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;if&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a4c5a4ed9b73dd86745fcc5ce46e6edae" kindref="member">KeywordElse</ref>,<sp/></highlight><highlight class="stringliteral">&quot;else&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a5229615543f1151e305ba04f60d8b9b8" kindref="member">KeywordDo</ref>,<sp/></highlight><highlight class="stringliteral">&quot;do&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa4144c1216383931b91e4d06d8f2e5b9" kindref="member">KeywordWhile</ref>,<sp/></highlight><highlight class="stringliteral">&quot;while&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a94e18e9f169344d2cc5308c7ae3cb4cc" kindref="member">KeywordReturn</ref>,<sp/></highlight><highlight class="stringliteral">&quot;return&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3efd6e34626ea06664a4e2bfbde6ac58" kindref="member">KeywordEnd</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aaf2cf666c2ba44b7ca371eb4b36991ce" kindref="member">Symbol</ref>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a2f8793e1c7bae9e986497c01c2be40f2" kindref="member">SymbolOpenBrace</ref>,<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a1b36db2997870e3f4750fe2bdacc1bf2" kindref="member">SymbolCloseBrace</ref>,<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ad186637e1f78fd0001af6cf552da87f5" kindref="member">SymbolSemiColon</ref>,<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7449b679a50e24f41705008788c90370" kindref="member">SymbolLeftParenthesis</ref>,<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab2c061b2efd2fbdd428ece15ed05ec27" kindref="member">SymbolRightParenthesis</ref>,<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a1c5da8e6a44118cb7af19c5966f611ab" kindref="member">SymbolLeftBracket</ref>,<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a8f7acc7cd1aa8763a3ec7c0723d3db3d" kindref="member">SymbolRightBracket</ref>,<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a69239f8c8f83820d5a13ad527a91316e" kindref="member">SymbolComma</ref>,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa1c4e8b5a4bedf3e787d4c9b338b162a" kindref="member">SymbolEquals</ref>,<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab1b59e86da4b072c9c28809e36054032" kindref="member">SymbolPlus</ref>,<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6acf933364f0a3278d3c703cae0290e773" kindref="member">SymbolMinus</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a2a3779e8d88ff5f074b61b0fe92b0b58" kindref="member">SymbolMultiply</ref>,<sp/></highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a249f0459fb4c38dfa2690f09164c6488" kindref="member">SymbolDivide</ref>,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6abb1b9f57f66f57725a1527e2f7acaedf" kindref="member">SymbolAnd</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7a5091b144812532ee7bf44dedd63781" kindref="member">SymbolOr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a07219731941d199649962cab568a10e9" kindref="member">SymbolGreater</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aaf53fad5156cbe194d6ed4f960e18ec8" kindref="member">SymbolLess</ref>,<sp/></highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a32d4f45905602f6394b83e167fd7291e" kindref="member">SymbolNot</ref>,<sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6af78cd3fd81595b5027563fc46de176bd" kindref="member">SymbolPeriod</ref>,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aac55360a9e63b95a0fe018110cee4891" kindref="member">SymbolEnd</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa9315da8cb5f19dba0d77daddab7b0bd" kindref="member">Constant</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_F(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a99979f3b0a7ec4669e64804412671e01" kindref="member">ConstantIdentifier</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_F(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6afbd47c44db84d19153a2178f5852a6e0" kindref="member">ConstantInteger</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_F(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ad8221a84d21471ea7ad0dd3ecc349b12" kindref="member">ConstantInlineVm</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_F(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a89061fb26c3f0c298b55ffca768debe8" kindref="member">ConstantInlineAsm</ref>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3bedb2300b4e67173eba51e3ab99c230" kindref="member">ConstantString</ref>,<sp/>node-&gt;<ref refid="classHack_1_1Compiler_1_1Node_1a20e6fa06ee899f50ac30e9dafa0acdfb" kindref="member">value</ref>());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a28c9451c0059f6fa453a7204a9c043be" kindref="member">ConstantTrue</ref>,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ab42502c51c876d73e971e0b0db8a656e" kindref="member">ConstantFalse</ref>,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6ac8ac251b2349e2ea86042e71aec4f317" kindref="member">ConstantNull</ref>,<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_V(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a2534a9437f7adc210d06c1b351ed4445" kindref="member">ConstantThis</ref>,<sp/></highlight><highlight class="stringliteral">&quot;this&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a3c41789e6326c83d485d3915fe44cb32" kindref="member">ConstantEnd</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a6a900f6dff7c1a6f57cc24896d7b4f10" kindref="member">SubtypeNone</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa0d8352ed2ca08217f9dc2b3ca635df4" kindref="member">SubtypeExpressionGroup</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a22c529bdbb52ad409d9243fab183552b" kindref="member">SubtypeCall</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7ffb8ab9b38b4b338d446fc1ba39ad29" kindref="member">SubtypeCallFunction</ref>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a1cf72edfd7c12952849fd910e83f4052" kindref="member">SubtypeCallMethod</ref>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a41bd191826e40afa0260afee2fdaa6d6" kindref="member">SubtypeArrayIndex</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a709cc210e1ab40744609244d1f7a3f8b" kindref="member">SubtypeIfElseCombo</ref>);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a15bb148de2293807ec093fde1f2c22d5" kindref="member">SubtypeTerm</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a19aa4a2351849e73de63c6464515bbcb" kindref="member">SubtypeOpTerm</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a332598b2aac0805651f0039b3ff545fc" kindref="member">SubtypeLetEqual</ref>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a82b15984274411f0ed2e4fbc86f8c073" kindref="member">SubtypeLetArrayEqual</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>END_ENUM_TO_STR()</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="classHack_1_1Compiler_1_1NodeUtils_1abe088b42e7363f53cd4ee4970c6af47a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Compiler_1_1NodeUtils_1abe088b42e7363f53cd4ee4970c6af47a" kindref="member" tooltip="Returns a exact string representation of the Subtype_ name ">NodeUtils::nodeSubtypeString</ref>(<ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref>&amp;<sp/>dest,<sp/><ref refid="classHack_1_1Compiler_1_1Node" kindref="compound">Node</ref>*<sp/>node)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BEGIN_ENUM_TO_STR(node-&gt;<ref refid="classHack_1_1Compiler_1_1Node_1a43701e9300a09cc248e5393993d9f95b" kindref="member">subtype</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a6a900f6dff7c1a6f57cc24896d7b4f10" kindref="member">SubtypeNone</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6aa0d8352ed2ca08217f9dc2b3ca635df4" kindref="member">SubtypeExpressionGroup</ref>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a22c529bdbb52ad409d9243fab183552b" kindref="member">SubtypeCall</ref>);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a7ffb8ab9b38b4b338d446fc1ba39ad29" kindref="member">SubtypeCallFunction</ref>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a1cf72edfd7c12952849fd910e83f4052" kindref="member">SubtypeCallMethod</ref>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a41bd191826e40afa0260afee2fdaa6d6" kindref="member">SubtypeArrayIndex</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a709cc210e1ab40744609244d1f7a3f8b" kindref="member">SubtypeIfElseCombo</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a15bb148de2293807ec093fde1f2c22d5" kindref="member">SubtypeTerm</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a19aa4a2351849e73de63c6464515bbcb" kindref="member">SubtypeOpTerm</ref>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a332598b2aac0805651f0039b3ff545fc" kindref="member">SubtypeLetEqual</ref>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CASE_TO_STR_A(<ref refid="namespaceHack_1_1Compiler_1a661f20cd8ee85e44fdd5e021df7c42b6a82b15984274411f0ed2e4fbc86f8c073" kindref="member">SubtypeLetArrayEqual</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>END_ENUM_TO_STR()</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Hack::Compiler</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Source/Compiler/Common/NodeUtils.cpp"/>
  </compounddef>
</doxygen>
