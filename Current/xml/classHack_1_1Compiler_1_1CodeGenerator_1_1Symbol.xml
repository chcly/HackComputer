<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol" kind="class" language="C++" prot="public">
    <compoundname>Hack::Compiler::CodeGenerator::Symbol</compoundname>
    <includes local="no">Source/Compiler/Generator/Symbol.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1aa9a723df3dca99b24631eff580889ec0" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t Hack::Compiler::CodeGenerator::Symbol::_entry</definition>
        <argsstring></argsstring>
        <name>_entry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="42" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ae9c61e2f83167376935af25f2e66915b" prot="private" static="no" mutable="no">
        <type>int8_t</type>
        <definition>int8_t Hack::Compiler::CodeGenerator::Symbol::_kind</definition>
        <argsstring></argsstring>
        <name>_kind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="41" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ab6b15fe0aa33927dd34936029441a42f" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Compiler::CodeGenerator::Symbol::_name</definition>
        <argsstring></argsstring>
        <name>_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="39" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ad4712b68b28f015bfb017435459c5872" prot="private" static="no" mutable="no">
        <type>int8_t</type>
        <definition>int8_t Hack::Compiler::CodeGenerator::Symbol::_type</definition>
        <argsstring></argsstring>
        <name>_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="40" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a4aaf0b7b3e7f348677d6e987a0345bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hack::Compiler::CodeGenerator::Symbol::Symbol</definition>
        <argsstring>()</argsstring>
        <name>Symbol</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="45" column="1" bodyfile="Source/Compiler/Generator/Symbol.cpp" bodystart="26" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a42a37a3aa91720ae15a7abd248997911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hack::Compiler::CodeGenerator::Symbol::Symbol</definition>
        <argsstring>(String name, int8_t type, int8_t kind, size_t entry)</argsstring>
        <name>Symbol</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
          <declname>name</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="47" column="1" bodyfile="Source/Compiler/Generator/Symbol.cpp" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1aabb2d6719eb63e0ab4337865b0b570bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Hack::Compiler::CodeGenerator::Symbol::Symbol</definition>
        <argsstring>(const Symbol &amp;oth)=default</argsstring>
        <name>Symbol</name>
        <param>
          <type>const <ref refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol" kindref="compound">Symbol</ref> &amp;</type>
          <declname>oth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ab608d0a405d8de2551e2317acded64e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const size_t &amp;</type>
        <definition>const size_t &amp; Hack::Compiler::CodeGenerator::Symbol::entry</definition>
        <argsstring>() const</argsstring>
        <name>entry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="57" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1aef20074306837af050b175e9479a799b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::CodeGenerator::Symbol::entry</definition>
        <argsstring>(const size_t &amp;)</argsstring>
        <name>entry</name>
        <param>
          <type>const size_t &amp;</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="65" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="105" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ac8801b52cf9e944a99ed53aba8b77629" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Compiler::CodeGenerator::Symbol::isValid</definition>
        <argsstring>() const</argsstring>
        <name>isValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="67" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="110" bodyend="113"/>
        <references refid="namespaceHack_1_1Compiler_1_1CodeGenerator_1ac08293c0a6cadd380abba4ce7069b7bca33eb8724d1cfb37808fb1dd2a3c24812" compoundref="Symbol_8h" startline="29">Hack::Compiler::CodeGenerator::None</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a41df95e5acf1eb60728abd89b14eba02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const int8_t &amp;</type>
        <definition>const int8_t &amp; Hack::Compiler::CodeGenerator::Symbol::kind</definition>
        <argsstring>() const</argsstring>
        <name>kind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="55" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1acb0b61f4e01dee44f66645b2e4a35e8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::CodeGenerator::Symbol::kind</definition>
        <argsstring>(const int8_t &amp;)</argsstring>
        <name>kind</name>
        <param>
          <type>const int8_t &amp;</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="63" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1aec2a51113f849ac614b9dac44f7682bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
        <definition>const String &amp; Hack::Compiler::CodeGenerator::Symbol::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="51" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a9cdf3a6824886d218bef477c1b59f132" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::CodeGenerator::Symbol::name</definition>
        <argsstring>(const String &amp;)</argsstring>
        <name>name</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <defname>name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="59" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="90" bodyend="93"/>
        <references refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1aec2a51113f849ac614b9dac44f7682bd" compoundref="Symbol_8h" startline="70" endline="73">name</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a070a1880926f761a3a6e8eb6f5af1f6e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const int8_t &amp;</type>
        <definition>const int8_t &amp; Hack::Compiler::CodeGenerator::Symbol::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="53" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1af912a46b1712b169b74f61611f830014" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Compiler::CodeGenerator::Symbol::type</definition>
        <argsstring>(const int8_t &amp;)</argsstring>
        <name>type</name>
        <param>
          <type>const int8_t &amp;</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Compiler/Generator/Symbol.h" line="61" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="95" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Source/Compiler/Generator/Symbol.h" line="37" column="1" bodyfile="Source/Compiler/Generator/Symbol.h" bodystart="36" bodyend="68"/>
    <listofallmembers>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1aa9a723df3dca99b24631eff580889ec0" prot="private" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>_entry</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ae9c61e2f83167376935af25f2e66915b" prot="private" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>_kind</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ab6b15fe0aa33927dd34936029441a42f" prot="private" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>_name</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ad4712b68b28f015bfb017435459c5872" prot="private" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>_type</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ab608d0a405d8de2551e2317acded64e5" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>entry</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1aef20074306837af050b175e9479a799b" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>entry</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1ac8801b52cf9e944a99ed53aba8b77629" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>isValid</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a41df95e5acf1eb60728abd89b14eba02" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>kind</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1acb0b61f4e01dee44f66645b2e4a35e8f" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>kind</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1aec2a51113f849ac614b9dac44f7682bd" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>name</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a9cdf3a6824886d218bef477c1b59f132" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>name</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a4aaf0b7b3e7f348677d6e987a0345bb5" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>Symbol</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a42a37a3aa91720ae15a7abd248997911" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>Symbol</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1aabb2d6719eb63e0ab4337865b0b570bb" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>Symbol</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1a070a1880926f761a3a6e8eb6f5af1f6e" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>type</name></member>
      <member refid="classHack_1_1Compiler_1_1CodeGenerator_1_1Symbol_1af912a46b1712b169b74f61611f830014" prot="public" virt="non-virtual"><scope>Hack::Compiler::CodeGenerator::Symbol</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
