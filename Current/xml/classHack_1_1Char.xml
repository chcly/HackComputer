<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="classHack_1_1Char" kind="class" language="C++" prot="public">
    <compoundname>Hack::Char</compoundname>
    <includes local="no">Source/Utils/Char.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classHack_1_1Char_1acadfc20f5f4f4ff24916c56d4aafc07c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Char::equals</definition>
        <argsstring>(const char *a, const char *b, size_t max)</argsstring>
        <name>equals</name>
        <param>
          <type>const char *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max</declname>
        </param>
        <briefdescription>
<para>Tests the strings for equality </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The first string.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The second string.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to test.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if a or b is null, false if the first character in a does not equal the first character in b, otherwise returns the result of strncmp. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="53" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="40" bodyend="48"/>
        <references refid="classHack_1_1Char_1aec2f1d7549e6794e9f1b12e18d12602a" compoundref="Char_8cpp" startline="35" endline="38">length</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a173f103b04790960e358ffcce33ab1e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Char::isNullOrEmpty</definition>
        <argsstring>(const char *in)</argsstring>
        <name>isNullOrEmpty</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="97" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1aec2f1d7549e6794e9f1b12e18d12602a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Hack::Char::length</definition>
        <argsstring>(const char *input)</argsstring>
        <name>length</name>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Counts the number of characters up to the first occurrence of a null character &apos;\0&apos; </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The char pointer to use to compute the length. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The total number of characters.</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="40" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a2e634e86f642f657dd42a2e967d99764" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toBinaryString</definition>
        <argsstring>(String &amp;dest, uint8_t v)</argsstring>
        <name>toBinaryString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="classuint8__t" kindref="compound">uint8_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="117" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="229" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a3a7e07c47aa6ddf1872fd0a22aa4beee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toBinaryString</definition>
        <argsstring>(String &amp;dest, uint16_t v)</argsstring>
        <name>toBinaryString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="131" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="277" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a49e41e2ec48dac4cd43de3f13416e54d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toBinaryString</definition>
        <argsstring>(uint8_t v)</argsstring>
        <name>toBinaryString</name>
        <param>
          <type><ref refid="classuint8__t" kindref="compound">uint8_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="147" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="332" bodyend="337"/>
        <references refid="classHack_1_1Char_1a2e634e86f642f657dd42a2e967d99764" compoundref="Char_8cpp" startline="229" endline="233">toBinaryString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a6109b7ac33a168c0d32bb0cf3e021b9c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toBinaryString</definition>
        <argsstring>(uint16_t v)</argsstring>
        <name>toBinaryString</name>
        <param>
          <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="161" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="381" bodyend="386"/>
        <references refid="classHack_1_1Char_1a2e634e86f642f657dd42a2e967d99764" compoundref="Char_8cpp" startline="229" endline="233">toBinaryString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1adea31e16265cdb63ea40f07034073edd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Char::toBool</definition>
        <argsstring>(const char *in)</argsstring>
        <name>toBool</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="99" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="157" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1acf474c4941309b5295a371d929d86b76" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Hack::Char::toBool</definition>
        <argsstring>(const String &amp;in)</argsstring>
        <name>toBool</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="105" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="190" bodyend="193"/>
        <references refid="classHack_1_1Char_1adea31e16265cdb63ea40f07034073edd" compoundref="Char_8cpp" startline="157" endline="174">toBool</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a8ca6361d986b2d2f34fc0b28dd5d68c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Hack::Char::toDouble</definition>
        <argsstring>(const char *in, const double &amp;def=0.0)</argsstring>
        <name>toDouble</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>def</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="103" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="183" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a23040a5aaccecd64f3432ff1d1388a3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double Hack::Char::toDouble</definition>
        <argsstring>(const String &amp;in, const double &amp;def=0.0)</argsstring>
        <name>toDouble</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>def</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="109" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="200" bodyend="203"/>
        <references refid="classHack_1_1Char_1a8ca6361d986b2d2f34fc0b28dd5d68c3" compoundref="Char_8cpp" startline="183" endline="188">toDouble</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a9706e2040a6912a05cb39486930ba5a5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Hack::Char::toFloat</definition>
        <argsstring>(const char *in, const float &amp;def=0.f)</argsstring>
        <name>toFloat</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>def</declname>
          <defval>0.f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="101" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="176" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a3ea30b82aea1fe96651b4ff7f1b6541f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float Hack::Char::toFloat</definition>
        <argsstring>(const String &amp;in, const float &amp;def=0.f)</argsstring>
        <name>toFloat</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>def</declname>
          <defval>0.f</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="107" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="195" bodyend="198"/>
        <references refid="classHack_1_1Char_1a9706e2040a6912a05cb39486930ba5a5" compoundref="Char_8cpp" startline="176" endline="181">toFloat</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a3534fb343cb723d19448c04b547d9d2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toHexString</definition>
        <argsstring>(String &amp;dest, uint8_t v)</argsstring>
        <name>toHexString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="classuint8__t" kindref="compound">uint8_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="119" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="235" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1ad54d719cdd63fa3f265ade5ca54ec679" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toHexString</definition>
        <argsstring>(String &amp;dest, uint16_t v)</argsstring>
        <name>toHexString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="129" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="270" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a218d64307f0a0c4c129e7e07cf3a5e24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toHexString</definition>
        <argsstring>(String &amp;dest, uint32_t v)</argsstring>
        <name>toHexString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="135" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="290" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a2f5b041019556c2552ad7c76d40323d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toHexString</definition>
        <argsstring>(String &amp;dest, uint64_t v)</argsstring>
        <name>toHexString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="139" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="304" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1aa71a984b44d0ee4dc5c646140fd261a3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toHexString</definition>
        <argsstring>(uint8_t v)</argsstring>
        <name>toHexString</name>
        <param>
          <type><ref refid="classuint8__t" kindref="compound">uint8_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="157" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="367" bodyend="372"/>
        <references refid="classHack_1_1Char_1a3534fb343cb723d19448c04b547d9d2f" compoundref="Char_8cpp" startline="235" endline="240">toHexString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1ab16c60f5441a1fba11356d908046fec2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toHexString</definition>
        <argsstring>(uint16_t v)</argsstring>
        <name>toHexString</name>
        <param>
          <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="159" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="374" bodyend="379"/>
        <references refid="classHack_1_1Char_1a3534fb343cb723d19448c04b547d9d2f" compoundref="Char_8cpp" startline="235" endline="240">toHexString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1ac7c18ba28e074214a77bc406b0a20b6c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toHexString</definition>
        <argsstring>(uint32_t v)</argsstring>
        <name>toHexString</name>
        <param>
          <type>uint32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="165" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="395" bodyend="400"/>
        <references refid="classHack_1_1Char_1a3534fb343cb723d19448c04b547d9d2f" compoundref="Char_8cpp" startline="235" endline="240">toHexString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1ac01d0bd168317ae2f1247a67e0b9032b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toHexString</definition>
        <argsstring>(uint64_t v)</argsstring>
        <name>toHexString</name>
        <param>
          <type>uint64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="169" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="409" bodyend="414"/>
        <references refid="classHack_1_1Char_1a3534fb343cb723d19448c04b547d9d2f" compoundref="Char_8cpp" startline="235" endline="240">toHexString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a1d1dca952e59d2b38615e7240d3b9055" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t Hack::Char::toInt16</definition>
        <argsstring>(const char *in, int16_t def=-1, int base=10)</argsstring>
        <name>toInt16</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>def</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="55" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="50" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a88b4b474b015d4f9d86e74859d54453a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t Hack::Char::toInt16</definition>
        <argsstring>(const String &amp;in, int16_t def=-1, int base=10)</argsstring>
        <name>toInt16</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>def</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="73" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="116" bodyend="119"/>
        <references refid="classHack_1_1Char_1a1d1dca952e59d2b38615e7240d3b9055" compoundref="Char_8cpp" startline="50" endline="62">toInt16</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a532f1147a1db35423d47c99351d146d0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Hack::Char::toInt32</definition>
        <argsstring>(const char *in, int32_t def=-1, int base=10)</argsstring>
        <name>toInt32</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>def</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="57" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="64" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a92f5742036276858a88b74eb66ed1f72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t Hack::Char::toInt32</definition>
        <argsstring>(const String &amp;in, int32_t def=-1, int base=10)</argsstring>
        <name>toInt32</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>def</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="77" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="121" bodyend="124"/>
        <references refid="classHack_1_1Char_1a532f1147a1db35423d47c99351d146d0" compoundref="Char_8cpp" startline="64" endline="76">toInt32</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1af184cc5ddf904290b7665776e0b74471" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t Hack::Char::toInt64</definition>
        <argsstring>(const char *in, int64_t def=-1, int base=10)</argsstring>
        <name>toInt64</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>def</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="59" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a84f3cab6a06ab9051f2dc486d410a43d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t Hack::Char::toInt64</definition>
        <argsstring>(const String &amp;in, int64_t def=-1, int base=10)</argsstring>
        <name>toInt64</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>def</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="81" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="126" bodyend="129"/>
        <references refid="classHack_1_1Char_1af184cc5ddf904290b7665776e0b74471" compoundref="Char_8cpp" startline="78" endline="83">toInt64</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toString</definition>
        <argsstring>(String &amp;dest, float v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="111" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="205" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a845c1f415bf8640d9b1fb83e4aca484c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toString</definition>
        <argsstring>(String &amp;dest, double v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="113" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="212" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a93229ebcd3ee13e8cfd84773d0068d45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toString</definition>
        <argsstring>(String &amp;dest, bool v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="115" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="219" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1adccd2a2ec6c50d9c8f54b4d6d711de22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toString</definition>
        <argsstring>(String &amp;dest, int16_t v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="121" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a92c68f951be4f2ff7869f10900de8f32" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toString</definition>
        <argsstring>(String &amp;dest, int32_t v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="123" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="249" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a387afc88f71084e205bd191447ff7e14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toString</definition>
        <argsstring>(String &amp;dest, int64_t v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="125" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="256" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a60e31bb0a93db1f3677452084a7bd091" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toString</definition>
        <argsstring>(String &amp;dest, uint16_t v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="127" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="263" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a632185cfd44aed668cf4de8e856f957c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toString</definition>
        <argsstring>(String &amp;dest, uint32_t v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="133" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="283" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a45935e552da4f01458f47ed81eb7d1d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Hack::Char::toString</definition>
        <argsstring>(String &amp;dest, uint64_t v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="137" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="297" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a380d184f547e0e1baa566fc896a26703" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toString</definition>
        <argsstring>(float v)</argsstring>
        <name>toString</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="141" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="311" bodyend="316"/>
        <references refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" compoundref="Char_8cpp" startline="205" endline="210">toString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1af1c5b232d3b511919ccecdb5c3a4c14c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toString</definition>
        <argsstring>(double v)</argsstring>
        <name>toString</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="143" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="318" bodyend="323"/>
        <references refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" compoundref="Char_8cpp" startline="205" endline="210">toString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a2f005a674b721242cb618f7d1864e775" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toString</definition>
        <argsstring>(bool v)</argsstring>
        <name>toString</name>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="145" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="325" bodyend="330"/>
        <references refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" compoundref="Char_8cpp" startline="205" endline="210">toString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a08d79154f3eb758afad70d859f11f9ec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toString</definition>
        <argsstring>(int16_t v)</argsstring>
        <name>toString</name>
        <param>
          <type>int16_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="149" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="339" bodyend="344"/>
        <references refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" compoundref="Char_8cpp" startline="205" endline="210">toString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1aec97be472177a04f2c44d70131fb3388" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toString</definition>
        <argsstring>(int32_t v)</argsstring>
        <name>toString</name>
        <param>
          <type>int32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="151" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="346" bodyend="351"/>
        <references refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" compoundref="Char_8cpp" startline="205" endline="210">toString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a84c81cbe8e1f77dd787ed0ae9454e9c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toString</definition>
        <argsstring>(int64_t v)</argsstring>
        <name>toString</name>
        <param>
          <type>int64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="153" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="353" bodyend="358"/>
        <references refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" compoundref="Char_8cpp" startline="205" endline="210">toString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1ac7470348173eccaa382ca511f4debdbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toString</definition>
        <argsstring>(uint16_t v)</argsstring>
        <name>toString</name>
        <param>
          <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="155" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="360" bodyend="365"/>
        <references refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" compoundref="Char_8cpp" startline="205" endline="210">toString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a71bedf8ccd42038fed290a85ae410d97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toString</definition>
        <argsstring>(uint32_t v)</argsstring>
        <name>toString</name>
        <param>
          <type>uint32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="163" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="388" bodyend="393"/>
        <references refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" compoundref="Char_8cpp" startline="205" endline="210">toString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a66042986b814ca9edcf22abd0817d1a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref></type>
        <definition>String Hack::Char::toString</definition>
        <argsstring>(uint64_t v)</argsstring>
        <name>toString</name>
        <param>
          <type>uint64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="167" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="402" bodyend="407"/>
        <references refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" compoundref="Char_8cpp" startline="205" endline="210">toString</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a9ed9382e14ad5abe9c33e8597f2708f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
        <definition>uint16_t Hack::Char::toUint16</definition>
        <argsstring>(const char *in, uint16_t def=(uint16_t) -1, int base=10)</argsstring>
        <name>toUint16</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
          <declname>def</declname>
          <defval>(<ref refid="classuint16__t" kindref="compound">uint16_t</ref>) -1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="61" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="85" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a1781b1dccd8889a869c98afd5b2fc2f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
        <definition>uint16_t Hack::Char::toUint16</definition>
        <argsstring>(const String &amp;in, uint16_t def=(uint16_t) -1, int base=10)</argsstring>
        <name>toUint16</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type><ref refid="classuint16__t" kindref="compound">uint16_t</ref></type>
          <declname>def</declname>
          <defval>(<ref refid="classuint16__t" kindref="compound">uint16_t</ref>) -1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="85" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="131" bodyend="136"/>
        <references refid="classHack_1_1Char_1a9ed9382e14ad5abe9c33e8597f2708f3" compoundref="Char_8cpp" startline="85" endline="95">toUint16</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1ae88f7c140ddd3b671003a6be455b21c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t Hack::Char::toUint32</definition>
        <argsstring>(const char *in, uint32_t def=(uint32_t) -1, int base=10)</argsstring>
        <name>toUint32</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>def</declname>
          <defval>(uint32_t) -1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="65" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="97" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a653dbcf71840c2c25e4a1b331081a5a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t Hack::Char::toUint32</definition>
        <argsstring>(const String &amp;in, uint32_t def=(uint32_t) -1, int base=10)</argsstring>
        <name>toUint32</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>def</declname>
          <defval>(uint32_t) -1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="89" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="138" bodyend="143"/>
        <references refid="classHack_1_1Char_1ae88f7c140ddd3b671003a6be455b21c0" compoundref="Char_8cpp" startline="97" endline="107">toUint32</references>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1a93f6e45cc3480aa1403694a46af317cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t Hack::Char::toUint64</definition>
        <argsstring>(const char *in, uint64_t def=(uint64_t) -1, int base=10)</argsstring>
        <name>toUint64</name>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>def</declname>
          <defval>(uint64_t) -1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="69" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="109" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classHack_1_1Char_1ab116bb576dc7e403b3a6f891d1c3e1ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t Hack::Char::toUint64</definition>
        <argsstring>(const String &amp;in, uint64_t def=(uint64_t) -1, int base=10)</argsstring>
        <name>toUint64</name>
        <param>
          <type>const <ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>def</declname>
          <defval>(uint64_t) -1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Utils/Char.h" line="93" column="1" bodyfile="Source/Utils/Char.cpp" bodystart="145" bodyend="150"/>
        <references refid="classHack_1_1Char_1a93f6e45cc3480aa1403694a46af317cb" compoundref="Char_8cpp" startline="109" endline="114">toUint64</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides conversion utilities between char pointers and strings. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="Source/Utils/Char.h" line="32" column="1" bodyfile="Source/Utils/Char.h" bodystart="31" bodyend="170"/>
    <listofallmembers>
      <member refid="classHack_1_1Char_1acadfc20f5f4f4ff24916c56d4aafc07c" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>equals</name></member>
      <member refid="classHack_1_1Char_1a173f103b04790960e358ffcce33ab1e9" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>isNullOrEmpty</name></member>
      <member refid="classHack_1_1Char_1aec2f1d7549e6794e9f1b12e18d12602a" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>length</name></member>
      <member refid="classHack_1_1Char_1a2e634e86f642f657dd42a2e967d99764" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toBinaryString</name></member>
      <member refid="classHack_1_1Char_1a3a7e07c47aa6ddf1872fd0a22aa4beee" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toBinaryString</name></member>
      <member refid="classHack_1_1Char_1a49e41e2ec48dac4cd43de3f13416e54d" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toBinaryString</name></member>
      <member refid="classHack_1_1Char_1a6109b7ac33a168c0d32bb0cf3e021b9c" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toBinaryString</name></member>
      <member refid="classHack_1_1Char_1adea31e16265cdb63ea40f07034073edd" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toBool</name></member>
      <member refid="classHack_1_1Char_1acf474c4941309b5295a371d929d86b76" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toBool</name></member>
      <member refid="classHack_1_1Char_1a8ca6361d986b2d2f34fc0b28dd5d68c3" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toDouble</name></member>
      <member refid="classHack_1_1Char_1a23040a5aaccecd64f3432ff1d1388a3e" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toDouble</name></member>
      <member refid="classHack_1_1Char_1a9706e2040a6912a05cb39486930ba5a5" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toFloat</name></member>
      <member refid="classHack_1_1Char_1a3ea30b82aea1fe96651b4ff7f1b6541f" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toFloat</name></member>
      <member refid="classHack_1_1Char_1a3534fb343cb723d19448c04b547d9d2f" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toHexString</name></member>
      <member refid="classHack_1_1Char_1ad54d719cdd63fa3f265ade5ca54ec679" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toHexString</name></member>
      <member refid="classHack_1_1Char_1a218d64307f0a0c4c129e7e07cf3a5e24" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toHexString</name></member>
      <member refid="classHack_1_1Char_1a2f5b041019556c2552ad7c76d40323d0" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toHexString</name></member>
      <member refid="classHack_1_1Char_1aa71a984b44d0ee4dc5c646140fd261a3" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toHexString</name></member>
      <member refid="classHack_1_1Char_1ab16c60f5441a1fba11356d908046fec2" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toHexString</name></member>
      <member refid="classHack_1_1Char_1ac7c18ba28e074214a77bc406b0a20b6c" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toHexString</name></member>
      <member refid="classHack_1_1Char_1ac01d0bd168317ae2f1247a67e0b9032b" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toHexString</name></member>
      <member refid="classHack_1_1Char_1a1d1dca952e59d2b38615e7240d3b9055" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toInt16</name></member>
      <member refid="classHack_1_1Char_1a88b4b474b015d4f9d86e74859d54453a" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toInt16</name></member>
      <member refid="classHack_1_1Char_1a532f1147a1db35423d47c99351d146d0" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toInt32</name></member>
      <member refid="classHack_1_1Char_1a92f5742036276858a88b74eb66ed1f72" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toInt32</name></member>
      <member refid="classHack_1_1Char_1af184cc5ddf904290b7665776e0b74471" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toInt64</name></member>
      <member refid="classHack_1_1Char_1a84f3cab6a06ab9051f2dc486d410a43d" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toInt64</name></member>
      <member refid="classHack_1_1Char_1a3a5e5db497a735c1cec92d748b513c9d" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a845c1f415bf8640d9b1fb83e4aca484c" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a93229ebcd3ee13e8cfd84773d0068d45" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1adccd2a2ec6c50d9c8f54b4d6d711de22" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a92c68f951be4f2ff7869f10900de8f32" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a387afc88f71084e205bd191447ff7e14" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a60e31bb0a93db1f3677452084a7bd091" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a632185cfd44aed668cf4de8e856f957c" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a45935e552da4f01458f47ed81eb7d1d8" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a380d184f547e0e1baa566fc896a26703" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1af1c5b232d3b511919ccecdb5c3a4c14c" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a2f005a674b721242cb618f7d1864e775" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a08d79154f3eb758afad70d859f11f9ec" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1aec97be472177a04f2c44d70131fb3388" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a84c81cbe8e1f77dd787ed0ae9454e9c7" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1ac7470348173eccaa382ca511f4debdbb" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a71bedf8ccd42038fed290a85ae410d97" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a66042986b814ca9edcf22abd0817d1a9" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toString</name></member>
      <member refid="classHack_1_1Char_1a9ed9382e14ad5abe9c33e8597f2708f3" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toUint16</name></member>
      <member refid="classHack_1_1Char_1a1781b1dccd8889a869c98afd5b2fc2f9" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toUint16</name></member>
      <member refid="classHack_1_1Char_1ae88f7c140ddd3b671003a6be455b21c0" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toUint32</name></member>
      <member refid="classHack_1_1Char_1a653dbcf71840c2c25e4a1b331081a5a9" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toUint32</name></member>
      <member refid="classHack_1_1Char_1a93f6e45cc3480aa1403694a46af317cb" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toUint64</name></member>
      <member refid="classHack_1_1Char_1ab116bb576dc7e403b3a6f891d1c3e1ad" prot="public" virt="non-virtual"><scope>Hack::Char</scope><name>toUint64</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
