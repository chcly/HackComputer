<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="Bindings_8cpp" kind="file" language="C++">
    <compoundname>Bindings.cpp</compoundname>
    <includes refid="Instruction_8h" local="yes">Assembler/Instruction.h</includes>
    <includes refid="Assembler_2Parser_8h" local="yes">Assembler/Parser.h</includes>
    <includes refid="Computer_8h" local="yes">Chips/Computer.h</includes>
    <includes refid="Exception_8h" local="yes">Utils/Exception.h</includes>
    <incdepgraph>
      <node id="691">
        <label>Utils/ParserBase/TokenBase.h</label>
        <childnode refid="692" relation="include">
        </childnode>
      </node>
      <node id="702">
        <label>Utils/Exception.h</label>
        <childnode refid="703" relation="include">
        </childnode>
        <childnode refid="704" relation="include">
        </childnode>
        <childnode refid="705" relation="include">
        </childnode>
        <childnode refid="706" relation="include">
        </childnode>
        <childnode refid="692" relation="include">
        </childnode>
      </node>
      <node id="696">
        <label>Assembler/Parser.h</label>
        <childnode refid="697" relation="include">
        </childnode>
        <childnode refid="695" relation="include">
        </childnode>
        <childnode refid="698" relation="include">
        </childnode>
      </node>
      <node id="699">
        <label>ScannerBase.h</label>
        <childnode refid="700" relation="include">
        </childnode>
        <childnode refid="691" relation="include">
        </childnode>
      </node>
      <node id="709">
        <label>cstdint</label>
      </node>
      <node id="718">
        <label>Chips/Register.h</label>
        <childnode refid="714" relation="include">
        </childnode>
      </node>
      <node id="715">
        <label>Chips/BitUtils.h</label>
        <childnode refid="716" relation="include">
        </childnode>
        <childnode refid="706" relation="include">
        </childnode>
      </node>
      <node id="724">
        <label>Chips/Screen.h</label>
        <childnode refid="721" relation="include">
        </childnode>
      </node>
      <node id="688">
        <label>Source/Bindings/Bindings.cpp</label>
        <link refid="Bindings_8cpp"/>
        <childnode refid="689" relation="include">
        </childnode>
        <childnode refid="696" relation="include">
        </childnode>
        <childnode refid="711" relation="include">
        </childnode>
        <childnode refid="702" relation="include">
        </childnode>
      </node>
      <node id="707">
        <label>UserInterface/Context.h</label>
        <childnode refid="692" relation="include">
        </childnode>
        <childnode refid="708" relation="include">
        </childnode>
        <childnode refid="710" relation="include">
        </childnode>
      </node>
      <node id="704">
        <label>stdexcept</label>
      </node>
      <node id="694">
        <label>string</label>
      </node>
      <node id="701">
        <label>unordered_set</label>
      </node>
      <node id="703">
        <label>exception</label>
      </node>
      <node id="708">
        <label>Utils/UserInterface/Common.h</label>
        <childnode refid="709" relation="include">
        </childnode>
      </node>
      <node id="692">
        <label>Utils/String.h</label>
        <childnode refid="693" relation="include">
        </childnode>
        <childnode refid="694" relation="include">
        </childnode>
        <childnode refid="695" relation="include">
        </childnode>
      </node>
      <node id="698">
        <label>Utils/ParserBase/ParserBase.h</label>
        <childnode refid="695" relation="include">
        </childnode>
        <childnode refid="699" relation="include">
        </childnode>
        <childnode refid="691" relation="include">
        </childnode>
      </node>
      <node id="700">
        <label>Utils/IndexCache.h</label>
        <childnode refid="697" relation="include">
        </childnode>
        <childnode refid="701" relation="include">
        </childnode>
        <childnode refid="702" relation="include">
        </childnode>
      </node>
      <node id="717">
        <label>Chips/ProgramCounter.h</label>
        <childnode refid="714" relation="include">
        </childnode>
      </node>
      <node id="722">
        <label>Chips/IMemorySegment.h</label>
        <childnode refid="723" relation="include">
        </childnode>
        <childnode refid="714" relation="include">
        </childnode>
      </node>
      <node id="713">
        <label>ALU.h</label>
        <childnode refid="714" relation="include">
        </childnode>
      </node>
      <node id="716">
        <label>bitset</label>
      </node>
      <node id="712">
        <label>Chips/CPU.h</label>
        <childnode refid="713" relation="include">
        </childnode>
        <childnode refid="714" relation="include">
        </childnode>
        <childnode refid="717" relation="include">
        </childnode>
        <childnode refid="718" relation="include">
        </childnode>
      </node>
      <node id="725">
        <label>Chips/Rom32.h</label>
        <childnode refid="714" relation="include">
        </childnode>
      </node>
      <node id="721">
        <label>Chips/DefaultMemorySegment.h</label>
        <childnode refid="722" relation="include">
        </childnode>
      </node>
      <node id="695">
        <label>vector</label>
      </node>
      <node id="720">
        <label>Chips/Ram16k.h</label>
        <childnode refid="721" relation="include">
        </childnode>
      </node>
      <node id="705">
        <label>utility</label>
      </node>
      <node id="693">
        <label>sstream</label>
      </node>
      <node id="697">
        <label>unordered_map</label>
      </node>
      <node id="710">
        <label>Utils/UserInterface/Math.h</label>
        <childnode refid="709" relation="include">
        </childnode>
        <childnode refid="695" relation="include">
        </childnode>
        <childnode refid="708" relation="include">
        </childnode>
      </node>
      <node id="714">
        <label>Chips/Chip.h</label>
        <childnode refid="715" relation="include">
        </childnode>
        <childnode refid="706" relation="include">
        </childnode>
      </node>
      <node id="711">
        <label>Chips/Computer.h</label>
        <childnode refid="712" relation="include">
        </childnode>
        <childnode refid="719" relation="include">
        </childnode>
        <childnode refid="725" relation="include">
        </childnode>
      </node>
      <node id="719">
        <label>Chips/Memory.h</label>
        <childnode refid="714" relation="include">
        </childnode>
        <childnode refid="720" relation="include">
        </childnode>
        <childnode refid="724" relation="include">
        </childnode>
      </node>
      <node id="689">
        <label>Assembler/Instruction.h</label>
        <childnode refid="690" relation="include">
        </childnode>
      </node>
      <node id="706">
        <label>Utils/Console.h</label>
        <childnode refid="692" relation="include">
        </childnode>
        <childnode refid="707" relation="include">
        </childnode>
      </node>
      <node id="723">
        <label>cstring</label>
      </node>
      <node id="690">
        <label>Assembler/Token.h</label>
        <childnode refid="691" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classHack_1_1Binding_1_1ComputerWrapper" prot="public">Hack::Binding::ComputerWrapper</innerclass>
    <innerclass refid="classHack_1_1Binding_1_1RamWrapper" prot="public">Hack::Binding::RamWrapper</innerclass>
    <innerclass refid="classHack_1_1Binding_1_1RomWrapper" prot="public">Hack::Binding::RomWrapper</innerclass>
    <innerclass refid="structHandleType" prot="public">HandleType</innerclass>
    <innernamespace refid="namespaceHack_1_1Binding">Hack::Binding</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="Bindings_8cpp_1a3536620a51a6fa45b41e6d9ff6fc4ad3" prot="public" static="no">
        <name>EXPORT_API</name>
        <initializer>extern &quot;C&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="25" column="10" bodyfile="Source/Bindings/Bindings.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="Bindings_8cpp_1ae1361356164a566a21615fd54eb340c1" prot="public" static="no">
        <type>struct <ref refid="structHandleType" kindref="compound">HandleType</ref> *</type>
        <definition>typedef struct HandleType*       Handle</definition>
        <argsstring></argsstring>
        <name>Handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="37" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Bindings_8cpp_1a0d4ffc8acecb75e599b8b2320d363039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API void *</type>
        <definition>EXPORT_API void* ComputerAllocate</definition>
        <argsstring>(size_t len)</argsstring>
        <name>ComputerAllocate</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="292" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a4a5e01ce7c5846b106950bffb12a15e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API void</type>
        <definition>EXPORT_API void ComputerFree</definition>
        <argsstring>(void *handle)</argsstring>
        <name>ComputerFree</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="297" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a86559bec7f6ec6fade773c6040a38ac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API const char *</type>
        <definition>EXPORT_API const char* ComputerGetLastError</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>ComputerGetLastError</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="327" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="327" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a9af2f846ef7ade234a59df8cd87bccfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API <ref refid="structHandleType" kindref="compound">Handle</ref></type>
        <definition>EXPORT_API Handle ComputerGetRam</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>ComputerGetRam</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="401" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="401" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1ab87872c8954ac3febae736bf46e904db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API <ref refid="structHandleType" kindref="compound">Handle</ref></type>
        <definition>EXPORT_API Handle ComputerGetRom</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>ComputerGetRom</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="409" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="409" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a5bb950a6c2731b8b0b7cbe16d77571e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API <ref refid="classuint8__t" kindref="compound">uint8_t</ref> *</type>
        <definition>EXPORT_API uint8_t* ComputerGetScreenBuffer</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>ComputerGetScreenBuffer</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="343" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="343" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a188da0108ba25a28dd80d7b25e425a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int ComputerGetScreenBufferSize</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>ComputerGetScreenBufferSize</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="335" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="335" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a27477fe111eb592d5321469cb72b72cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API <ref refid="structHack_1_1Chips_1_1CpuState" kindref="compound">CpuState</ref></type>
        <definition>EXPORT_API CpuState ComputerGetState</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>ComputerGetState</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="366" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="366" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a5b24bcbedb24f7a6463bea0883c22e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int ComputerLoadSource</definition>
        <argsstring>(const Handle handle, char *memory, const int length)</argsstring>
        <name>ComputerLoadSource</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="391" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="391" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a4d9de4d9c97ae0ee68622be3a013d219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API void</type>
        <definition>EXPORT_API void ComputerUpdateScreen</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>ComputerUpdateScreen</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="351" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="351" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1af4c28b331565ee665f71103ae991875e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetARegister</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetARegister</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="481" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="481" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a6c40a1f2c702a1f72a90e2365b86e8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetClock</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetClock</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="489" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="489" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1ad1d43081ff1b2b1c868483840b5e42d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetDRegister</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetDRegister</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="473" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="473" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a56d4c439496016149461d961a862f423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetInput</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetInput</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="513" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="513" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a5303e62d37777fe43e0458e30f76f44d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetInstruction</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetInstruction</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="497" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="497" bodyend="503"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a4ac861f8b11ad28f68868232c7bf8ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetInstructionPointer</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetInstructionPointer</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="448" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="448" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a63a054648981569c517ad5e41aab65fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetLoadRam</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetLoadRam</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="505" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="505" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1abf118871ce8d350aa3cca37aed1092e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetOutputAddress</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetOutputAddress</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="465" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="465" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1ac8b0e8680e7d5a13636b0754cfd60698" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetOutputValue</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetOutputValue</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="457" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="457" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a141762d9e70ef9298dfe06d1d784e659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int CpuGetReset</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>CpuGetReset</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="521" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="521" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a603988ef09f0c2ba86d150675c093c9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API <ref refid="structHandleType" kindref="compound">Handle</ref></type>
        <definition>EXPORT_API Handle CreateComputer</definition>
        <argsstring>()</argsstring>
        <name>CreateComputer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="302" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="302" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1ac7020968d580800221d7bd3336a34be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API const char *</type>
        <definition>EXPORT_API const char* DecodeInstruction</definition>
        <argsstring>(const Handle handle, const int value)</argsstring>
        <name>DecodeInstruction</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="358" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="358" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1ad81b9a39e949cb3b3f80291d05f46959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API void</type>
        <definition>EXPORT_API void DestroyComputer</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>DestroyComputer</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="307" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="307" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1ac55a9dacb7c36820ccedef6caae38c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMemoryValid</definition>
        <argsstring>(const char *memory, const int length)</argsstring>
        <name>IsMemoryValid</name>
        <param>
          <type>const char *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="375" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="375" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a69c384975c420e685278e42a23965afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int RamGetValue</definition>
        <argsstring>(const Handle handle, const int index)</argsstring>
        <name>RamGetValue</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="417" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="417" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a35655d351e16b284615bb62f23f48d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API void</type>
        <definition>EXPORT_API void RamZeroMemory</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>RamZeroMemory</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="425" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="425" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a1aab165142bf22d587e8cfc2c30bf471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API void</type>
        <definition>EXPORT_API void RestartComputer</definition>
        <argsstring>(const Handle handle)</argsstring>
        <name>RestartComputer</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="320" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="320" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a9a1822408b5b9d600ae647ecd3ed77d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API int</type>
        <definition>EXPORT_API int RomGetValue</definition>
        <argsstring>(const Handle handle, const int index)</argsstring>
        <name>RomGetValue</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="432" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="432" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1a536832b5ec23272e7fb6929ffaa593e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API const char *</type>
        <definition>EXPORT_API const char* RomGetValueDecoded</definition>
        <argsstring>(const Handle handle, const int index)</argsstring>
        <name>RomGetValueDecoded</name>
        <param>
          <type>const <ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="440" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="440" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="Bindings_8cpp_1ac2a67287c7ee3f1e47304cc80673c49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>EXPORT_API void</type>
        <definition>EXPORT_API void UpdateComputer</definition>
        <argsstring>(Handle handle)</argsstring>
        <name>UpdateComputer</name>
        <param>
          <type><ref refid="structHandleType" kindref="compound">Handle</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/Bindings/Bindings.cpp" line="313" column="1" bodyfile="Source/Bindings/Bindings.cpp" bodystart="313" bodyend="318"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">-------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>Charles<sp/>Carley.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>This<sp/>software<sp/>is<sp/>provided<sp/>&apos;as-is&apos;,<sp/>without<sp/>any<sp/>express<sp/>or<sp/>implied</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>warranty.<sp/>In<sp/>no<sp/>event<sp/>will<sp/>the<sp/>authors<sp/>be<sp/>held<sp/>liable<sp/>for<sp/>any<sp/>damages</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>arising<sp/>from<sp/>the<sp/>use<sp/>of<sp/>this<sp/>software.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/>including<sp/>commercial<sp/>applications,<sp/>and<sp/>to<sp/>alter<sp/>it<sp/>and<sp/>redistribute<sp/>it</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>freely,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>1.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented;<sp/>you<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>claim<sp/>that<sp/>you<sp/>wrote<sp/>the<sp/>original<sp/>software.<sp/>If<sp/>you<sp/>use<sp/>this<sp/>software</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>product,<sp/>an<sp/>acknowledgment<sp/>in<sp/>the<sp/>product<sp/>documentation<sp/>would<sp/>be</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>appreciated<sp/>but<sp/>is<sp/>not<sp/>required.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>2.<sp/>Altered<sp/>source<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>3.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered<sp/>from<sp/>any<sp/>source<sp/>distribution.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">-------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPORT_API<sp/>extern<sp/>&quot;C&quot;<sp/>_declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPORT_API<sp/>extern<sp/>&quot;C&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Assembler/Instruction.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Assembler/Parser.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Chips/Computer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils/Exception.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structHandleType" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structHandleType" kindref="compound">HandleType</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35" refid="structHandleType_1a1d96c9ad14dfd59eb72ad17acd48550d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><ref refid="structHandleType_1a1d96c9ad14dfd59eb72ad17acd48550d" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="36" refid="structHandleType_1abbb566befc5791ac90d23564b5d9939d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/><ref refid="structHandleType_1abbb566befc5791ac90d23564b5d9939d" kindref="member">ptr</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structHandleType" kindref="compound">Handle</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="namespaceHack_1_1Binding" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceHack_1_1Binding" kindref="compound">Hack::Binding</ref></highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Chips;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Assembler;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="namespaceHack_1_1Binding_1a0a115b3347cdfd195e6032ae7fca252d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>uint64_t<sp/><ref refid="namespaceHack_1_1Binding_1a0a115b3347cdfd195e6032ae7fca252d" kindref="member">ComputerType</ref><sp/>=<sp/>0x6543F55D6F4A3D0F;</highlight></codeline>
<codeline lineno="45" refid="namespaceHack_1_1Binding_1ab9e96018072b404d8a46e2192f06b954" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>uint64_t<sp/><ref refid="namespaceHack_1_1Binding_1ab9e96018072b404d8a46e2192f06b954" kindref="member">RomType</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x06D5DAF556F4ADB3;</highlight></codeline>
<codeline lineno="46" refid="namespaceHack_1_1Binding_1afa6a47600d4368c4198b7292deb32747" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>uint64_t<sp/><ref refid="namespaceHack_1_1Binding_1afa6a47600d4368c4198b7292deb32747" kindref="member">RamType</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x3D654F7A36F4A3D0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classHack_1_1Binding_1_1RomWrapper" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classHack_1_1Binding_1_1RomWrapper" kindref="compound">RomWrapper</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>type<sp/>=<sp/><ref refid="namespaceHack_1_1Binding_1ab9e96018072b404d8a46e2192f06b954" kindref="member">RomType</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Chips_1_1Rom32" kindref="compound">Rom32</ref>*<sp/>_rom;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref><sp/>_cache;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58" refid="classHack_1_1Binding_1_1RomWrapper_1a430e884e4dfa1dec8dc20bb332bd0b3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RomWrapper_1a430e884e4dfa1dec8dc20bb332bd0b3a" kindref="member">RomWrapper</ref>(<ref refid="classHack_1_1Chips_1_1Rom32" kindref="compound">Rom32</ref>*<sp/>rom32)<sp/>:</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_rom(rom32)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classHack_1_1Binding_1_1RomWrapper_1a707b3bc9bc40f455b80556dda7919bdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>index<sp/>must<sp/>be<sp/>less<sp/>than<sp/>0x7FFF<sp/>(32K)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_rom<sp/>&amp;&amp;<sp/>(idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>idx<sp/>&lt;<sp/>0x7FFF)<sp/>&amp;&amp;<sp/>type<sp/>==<sp/><ref refid="namespaceHack_1_1Binding_1ab9e96018072b404d8a46e2192f06b954" kindref="member">RomType</ref>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_rom-&gt;<ref refid="classHack_1_1Chips_1_1Rom32_1a5f035550d36a60b39767abc4d5942b46" kindref="member">get</ref>(idx);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="classHack_1_1Binding_1_1RomWrapper_1a9a9be8a8b466961c6a20ab9e89781200" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classHack_1_1Binding_1_1RomWrapper_1a9a9be8a8b466961c6a20ab9e89781200" kindref="member">decode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="72"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_cache.clear();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(idx);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Assembler_1_1Instruction" kindref="compound" tooltip="Utility class that converts a binary instruction to its symbolic string representation. ">Instruction</ref><sp/>instruction((<ref refid="classuint16__t" kindref="compound">uint16_t</ref>)val);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_cache<sp/>=<sp/>instruction.<ref refid="classHack_1_1Assembler_1_1Instruction_1ade81360d9e9ec9bdfedc8af1d0252a73" kindref="member">string</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_cache.c_str();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classHack_1_1Binding_1_1RomWrapper_1ac77d5275d6ebe3ea4efe37f262c48826" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RomWrapper" kindref="compound">RomWrapper</ref>*<sp/><ref refid="classHack_1_1Binding_1_1RomWrapper_1ac77d5275d6ebe3ea4efe37f262c48826" kindref="member">cast</ref>(<ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>check<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*)handle;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check<sp/>==<sp/><ref refid="namespaceHack_1_1Binding_1ab9e96018072b404d8a46e2192f06b954" kindref="member">RomType</ref>)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RomWrapper" kindref="compound">RomWrapper</ref>*)handle;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="classHack_1_1Binding_1_1RamWrapper" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classHack_1_1Binding_1_1RamWrapper" kindref="compound">RamWrapper</ref></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>type<sp/>=<sp/><ref refid="namespaceHack_1_1Binding_1afa6a47600d4368c4198b7292deb32747" kindref="member">RamType</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Chips_1_1Memory" kindref="compound">Memory</ref>*<sp/>_memory;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104" refid="classHack_1_1Binding_1_1RamWrapper_1a1b5b1caf9f894916102fb72f44b26c97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RamWrapper_1a1b5b1caf9f894916102fb72f44b26c97" kindref="member">RamWrapper</ref>(<ref refid="classHack_1_1Chips_1_1Memory" kindref="compound">Memory</ref>*<sp/>mem)<sp/>:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_memory(mem)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classHack_1_1Binding_1_1RamWrapper_1a65d06a289f5f265e71f03473f86f5ae1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_memory<sp/>&amp;&amp;<sp/>type<sp/>==<sp/><ref refid="namespaceHack_1_1Binding_1afa6a47600d4368c4198b7292deb32747" kindref="member">RamType</ref>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_memory-&gt;<ref refid="classHack_1_1Chips_1_1Memory_1a7f5b5e64aa1b441be1bc547e27602559" kindref="member">get</ref>(idx);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="classHack_1_1Binding_1_1RamWrapper_1a761fe5370d34e73b261692cc622ea7af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RamWrapper_1a761fe5370d34e73b261692cc622ea7af" kindref="member">zeroMemory</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="117"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_memory<sp/>&amp;&amp;<sp/>type<sp/>==<sp/><ref refid="namespaceHack_1_1Binding_1afa6a47600d4368c4198b7292deb32747" kindref="member">RamType</ref>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_memory-&gt;<ref refid="classHack_1_1Chips_1_1Memory_1a0f261c4cfff3ae3fcd99537d2588a180" kindref="member">zero</ref>();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="classHack_1_1Binding_1_1RamWrapper_1a3a20c0f0773900ddb9d76d1ed0ff120f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RamWrapper" kindref="compound">RamWrapper</ref>*<sp/><ref refid="classHack_1_1Binding_1_1RamWrapper_1a3a20c0f0773900ddb9d76d1ed0ff120f" kindref="member">cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>check<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*)handle;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check<sp/>==<sp/><ref refid="namespaceHack_1_1Binding_1afa6a47600d4368c4198b7292deb32747" kindref="member">RamType</ref>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RamWrapper" kindref="compound">RamWrapper</ref>*)handle;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="classHack_1_1Binding_1_1ComputerWrapper" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>type<sp/>=<sp/><ref refid="namespaceHack_1_1Binding_1a0a115b3347cdfd195e6032ae7fca252d" kindref="member">ComputerType</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Chips_1_1Computer" kindref="compound">Computer</ref>*<sp/><sp/><sp/>_computer;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Binding_1_1RomWrapper" kindref="compound">RomWrapper</ref>*<sp/>_rom;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Binding_1_1RamWrapper" kindref="compound">RamWrapper</ref>*<sp/>_ram;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref><sp/>_cache;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref><sp/>_error;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classuint8__t" kindref="compound">uint8_t</ref>*<sp/>_bytes;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149" refid="classHack_1_1Binding_1_1ComputerWrapper_1a05701422e12ee10d04b8bac96cda6c63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a05701422e12ee10d04b8bac96cda6c63" kindref="member">ComputerWrapper</ref>()<sp/>:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_computer(new<sp/><ref refid="classHack_1_1Chips_1_1Computer" kindref="compound">Computer</ref>()),</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bytes(nullptr)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_rom<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RomWrapper" kindref="compound">RomWrapper</ref>(_computer-&gt;<ref refid="classHack_1_1Chips_1_1Computer_1aa88d19943c50711fbe12d82e901fb21a" kindref="member">rom</ref>());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_ram<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RamWrapper" kindref="compound">RamWrapper</ref>(_computer-&gt;<ref refid="classHack_1_1Chips_1_1Computer_1abf924e51c33908fd52168a0c29228d1c" kindref="member">memory</ref>());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bytes<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classuint8__t" kindref="compound">uint8_t</ref>[0x80001];</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classHack_1_1Binding_1_1ComputerWrapper_1abab052c1b6bba357dd8c8c1dd33705ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1abab052c1b6bba357dd8c8c1dd33705ac" kindref="member">~ComputerWrapper</ref>()</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>_rom;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>_ram;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>_computer;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>_bytes;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classHack_1_1Binding_1_1ComputerWrapper_1ac4124d74a3382a231681fce5fcffb89d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1ac4124d74a3382a231681fce5fcffb89d" kindref="member">update</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="167"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_computer<sp/>&amp;&amp;<sp/>type<sp/>==<sp/><ref refid="namespaceHack_1_1Binding_1a0a115b3347cdfd195e6032ae7fca252d" kindref="member">ComputerType</ref>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_computer-&gt;<ref refid="classHack_1_1Chips_1_1Computer_1aa44e98396b5191c503bd5255fe0ffa1f" kindref="member">update</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classHack_1_1Binding_1_1ComputerWrapper_1af671488ec3c545e916e8e9071bc08164" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1af671488ec3c545e916e8e9071bc08164" kindref="member">reset</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="173"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_computer<sp/>&amp;&amp;<sp/>type<sp/>==<sp/><ref refid="namespaceHack_1_1Binding_1a0a115b3347cdfd195e6032ae7fca252d" kindref="member">ComputerType</ref>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_computer-&gt;<ref refid="classHack_1_1Chips_1_1Computer_1a5e2ff33095c4f19eecdfdbfdba101b52" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classHack_1_1Binding_1_1ComputerWrapper_1a59a3eb0c4d63bf567902d41ae970dd78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a59a3eb0c4d63bf567902d41ae970dd78" kindref="member">getScreenBufferSize</ref>()</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0x80000;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classHack_1_1Binding_1_1ComputerWrapper_1af85b61cef2548f621730bb77456b9037" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1af85b61cef2548f621730bb77456b9037" kindref="member">updateScreen</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="184"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_computer<sp/>||<sp/>type<sp/>!=<sp/><ref refid="namespaceHack_1_1Binding_1a0a115b3347cdfd195e6032ae7fca252d" kindref="member">ComputerType</ref>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>0x2000;<sp/>++i)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_computer-&gt;<ref refid="classHack_1_1Chips_1_1Computer_1aa44e98396b5191c503bd5255fe0ffa1f" kindref="member">update</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint16__t" kindref="compound">uint16_t</ref>*<sp/>pointer<sp/>=</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_computer-&gt;<ref refid="classHack_1_1Chips_1_1Computer_1abf924e51c33908fd52168a0c29228d1c" kindref="member">memory</ref>()-&gt;<ref refid="classHack_1_1Chips_1_1Memory_1a33e18b325ababb24a8f50de7dcf03fd0" kindref="member">pointer</ref>(<ref refid="classHack_1_1Chips_1_1Memory_1a5e6ec45243f237084d377b6aefb6981b" kindref="member">Memory::ScreenAddress</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint8__t" kindref="compound">uint8_t</ref>*<sp/>bytes<sp/>=<sp/>(<ref refid="classuint8__t" kindref="compound">uint8_t</ref>*)_bytes;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>0x2000;<sp/>++i)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>16;<sp/>j++)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointer[i]<sp/>&amp;<sp/>1<sp/>&lt;&lt;<sp/>j)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes++<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes++<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes++<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes++<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes++<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes++<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes++<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bytes++<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="classHack_1_1Binding_1_1ComputerWrapper_1af50055b2d81ae08683235a66d7f8d9a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint8__t" kindref="compound">uint8_t</ref>*<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1af50055b2d81ae08683235a66d7f8d9a4" kindref="member">getScreenBuffer</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="218"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_bytes;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="classHack_1_1Binding_1_1ComputerWrapper_1aef4a7e2f5cd7320f4109b3f17dccbac5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Binding_1_1RamWrapper" kindref="compound">RamWrapper</ref>*<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1aef4a7e2f5cd7320f4109b3f17dccbac5" kindref="member">getRam</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="223"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_ram;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="classHack_1_1Binding_1_1ComputerWrapper_1a5f0fe4ea707ae43d018f171f854656d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Binding_1_1RomWrapper" kindref="compound">RomWrapper</ref>*<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a5f0fe4ea707ae43d018f171f854656d7" kindref="member">getRom</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="228"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_rom;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHack_1_1Chips_1_1CpuState" kindref="compound">CpuState</ref>&amp;<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="233"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_computer<sp/>&amp;&amp;<sp/>type<sp/>==<sp/><ref refid="namespaceHack_1_1Binding_1a0a115b3347cdfd195e6032ae7fca252d" kindref="member">ComputerType</ref>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_computer-&gt;<ref refid="classHack_1_1Chips_1_1Computer_1a90309c49a06a3585499693ca005aa643" kindref="member">state</ref>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Chips_1_1Computer_1aa280cc035bb3869f0d63c55d5c608a7f" kindref="member">Computer::NullState</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="classHack_1_1Binding_1_1ComputerWrapper_1a2a71a4d9889b5c19305d242c76e02966" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a2a71a4d9889b5c19305d242c76e02966" kindref="member">load</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">String</ref>&amp;<sp/>src)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="240"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_error.clear();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Assembler_1_1Parser" kindref="compound">Parser</ref><sp/>psr;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceHack_1a3359517a07995b79651874c054caa348" kindref="member">StringStream</ref><sp/>ss;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>src;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psr.<ref refid="classHack_1_1ParserBase_1a4668ec9b913931ce518de6d7f92fb4e0" kindref="member">parse</ref>(ss);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classHack_1_1Assembler_1_1Parser_1a9e0e8293fb5dfb34d2669b83ee4e7a61" kindref="member">Parser::Instructions</ref><sp/>inst<sp/>=<sp/>psr.<ref refid="classHack_1_1Assembler_1_1Parser_1a5f8343d626d9e19a9d1cd7d64979ae24" kindref="member">instructions</ref>();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_computer-&gt;<ref refid="classHack_1_1Chips_1_1Computer_1ab215c3ad1dfa7242b4edaccb75869063" kindref="member">load</ref>(inst.data(),<sp/>inst.size());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<ref refid="classHack_1_1Exception" kindref="compound">Exception</ref>&amp;<sp/>ex)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_error<sp/>=<sp/>ex.<ref refid="classHack_1_1Exception_1ad552d982f58950c324eaebd2dfbd1fe2" kindref="member">what</ref>();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="classHack_1_1Binding_1_1ComputerWrapper_1afec078bec7c111ec37d14d29ba8dc98a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1afec078bec7c111ec37d14d29ba8dc98a" kindref="member">decode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="262"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_cache.clear();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Assembler_1_1Instruction" kindref="compound" tooltip="Utility class that converts a binary instruction to its symbolic string representation. ">Instruction</ref><sp/>instruction((<ref refid="classuint16__t" kindref="compound">uint16_t</ref>)val);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_cache<sp/>=<sp/>instruction.<ref refid="classHack_1_1Assembler_1_1Instruction_1ade81360d9e9ec9bdfedc8af1d0252a73" kindref="member">string</ref>();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_cache.c_str();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272" refid="classHack_1_1Binding_1_1ComputerWrapper_1a283fbcbbe1e31f1ec8404358041daa60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a283fbcbbe1e31f1ec8404358041daa60" kindref="member">getLastError</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="273"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_error.c_str();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">cast</ref>(<ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>check<sp/>=<sp/>*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t*)handle;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check<sp/>==<sp/><ref refid="namespaceHack_1_1Binding_1a0a115b3347cdfd195e6032ae7fca252d" kindref="member">ComputerType</ref>)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*)handle;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Hack::Binding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceHack_1_1Binding" kindref="compound">Hack::Binding</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ComputerAllocate(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(len);</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputerFree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>handle)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>free(handle);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">EXPORT_API<sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>CreateComputer()</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structHandleType" kindref="compound">Handle</ref>)</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>();</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DestroyComputer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>wrapper;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>UpdateComputer(<ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1ac4124d74a3382a231681fce5fcffb89d" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RestartComputer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1af671488ec3c545e916e8e9071bc08164" kindref="member">reset</ref>();</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ComputerGetLastError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a283fbcbbe1e31f1ec8404358041daa60" kindref="member">getLastError</ref>();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComputerGetScreenBufferSize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a59a3eb0c4d63bf567902d41ae970dd78" kindref="member">ComputerWrapper::getScreenBufferSize</ref>();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">EXPORT_API<sp/><ref refid="classuint8__t" kindref="compound">uint8_t</ref>*<sp/>ComputerGetScreenBuffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="344"><highlight class="normal">{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1af50055b2d81ae08683235a66d7f8d9a4" kindref="member">getScreenBuffer</ref>();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputerUpdateScreen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1af85b61cef2548f621730bb77456b9037" kindref="member">updateScreen</ref>();</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>DecodeInstruction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1afec078bec7c111ec37d14d29ba8dc98a" kindref="member">decode</ref>(value);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">EXPORT_API<sp/><ref refid="structHack_1_1Chips_1_1CpuState" kindref="compound">CpuState</ref><sp/>ComputerGetState(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Chips_1_1Computer_1aa280cc035bb3869f0d63c55d5c608a7f" kindref="member">Computer::NullState</ref>;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsMemoryValid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>memory,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memory<sp/>&amp;&amp;<sp/>length<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>length<sp/>&lt;<sp/>0xFFFF)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length<sp/>&amp;&amp;<sp/>result;<sp/>++i)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch<sp/>=<sp/>memory[i];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>ch<sp/>&gt;=<sp/>32<sp/>&amp;&amp;<sp/>ch<sp/>&lt;<sp/>127<sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>ch<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ComputerLoadSource(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>length)</highlight></codeline>
<codeline lineno="394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper<sp/>&amp;&amp;<sp/>IsMemoryValid(memory,<sp/>length))</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a2a71a4d9889b5c19305d242c76e02966" kindref="member">load</ref>(<ref refid="namespaceHack_1af578ea8fc214989b8ebeece788fa787d" kindref="member">Hack::String</ref>(memory,<sp/>length))<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal">EXPORT_API<sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>ComputerGetRam(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structHandleType" kindref="compound">Handle</ref>)wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1aef4a7e2f5cd7320f4109b3f17dccbac5" kindref="member">getRam</ref>();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal">EXPORT_API<sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>ComputerGetRom(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structHandleType" kindref="compound">Handle</ref>)wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a5f0fe4ea707ae43d018f171f854656d7" kindref="member">getRom</ref>();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RamGetValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RamWrapper" kindref="compound">RamWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1RamWrapper_1a3a20c0f0773900ddb9d76d1ed0ff120f" kindref="member">RamWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1RamWrapper_1a65d06a289f5f265e71f03473f86f5ae1" kindref="member">get</ref>(index);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RamZeroMemory(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RamWrapper" kindref="compound">RamWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1RamWrapper_1a3a20c0f0773900ddb9d76d1ed0ff120f" kindref="member">RamWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1RamWrapper_1a761fe5370d34e73b261692cc622ea7af" kindref="member">zeroMemory</ref>();</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RomGetValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RomWrapper" kindref="compound">RomWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1RomWrapper_1ac77d5275d6ebe3ea4efe37f262c48826" kindref="member">RomWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1RomWrapper_1a707b3bc9bc40f455b80556dda7919bdc" kindref="member">get</ref>(index);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>RomGetValueDecoded(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1RomWrapper" kindref="compound">RomWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1RomWrapper_1ac77d5275d6ebe3ea4efe37f262c48826" kindref="member">RomWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1RomWrapper_1a9a9be8a8b466961c6a20ab9e89781200" kindref="member">decode</ref>(index);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetInstructionPointer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1a8ff12fb359df46f8c2b7bb4536b03bd2" kindref="member">pc</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetOutputValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1a4898fb8aa66f45e0e07d4b754b8d93ba" kindref="member">outM</ref>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetOutputAddress(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1a7b6ea40228d9e23b00fd2ee43133a6f3" kindref="member">addrM</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetDRegister(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1a918ad89614f75599104e9c1a8123c916" kindref="member">regD</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetARegister(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1a764dbb644ba5bb323c97e09cb26ae122" kindref="member">regA</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetClock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1a5606ebaf9ae4d826b421dce343c223f9" kindref="member">clock</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetInstruction(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1a3bdae3da64a41fd9b98171cea0f1b1c1" kindref="member">inst</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetLoadRam(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1af1398587a09d5722d1d794f87d427a35" kindref="member">writeM</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetInput(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1ae932a7489f8bdecf33ffd43c9410130f" kindref="member">ram</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">EXPORT_API<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CpuGetReset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structHandleType" kindref="compound">Handle</ref><sp/>handle)</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper" kindref="compound">ComputerWrapper</ref>*<sp/>wrapper<sp/>=<sp/><ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a41c100b390407b69d20f446a07509f60" kindref="member">ComputerWrapper::cast</ref>(handle);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrapper)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wrapper-&gt;<ref refid="classHack_1_1Binding_1_1ComputerWrapper_1a8a7fc482100bb79d5d2827576d1a7497" kindref="member">getState</ref>().<ref refid="structHack_1_1Chips_1_1CpuState_1af9c11b4b51b6cd89cdfdcccdf52341db" kindref="member">reset</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Source/Bindings/Bindings.cpp"/>
  </compounddef>
</doxygen>
